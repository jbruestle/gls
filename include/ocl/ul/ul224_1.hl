/*
 * AUTOGENERATED tcarstens January 2014
 */
#ifndef __UL224_1__
#define __UL224_1__

#include "ul224_0.hl"
#include "ul256_0.hl"


/*
 * Compute the quotient with remainder of two ul224's (q = a/b_, r = a%b_, resp.)
 */
void ul224_divrem(ul224 Q_, ul224 R_, ul224 A_in, ul224 B_in);
void ul224_divrem(ul224 Q_, ul224 R_, ul224 A_in, ul224 B_in) {
    ul256 Q = {{{0}}};
    ul224 R = {{{0}}};
    if (ul224_cmp(A_in, B_in) < 0) {
        ul224_set(Q_, (struct ul224_s *)Q);
        ul224_set(R_, A_in);
        return;
    }
    
    /* Locate the most significant word of B_in           */
    int n = 7; /* B_in->x[n-1] is the MSW. */
    while ((n > 0) && (!B_in->x[n-1]))
        n--;
    /* NB: if n == 0, then B_in = 0, and we've been asked */
    /* to comptue a div by 0. Thus we assume n > 0, which */
    /* means (for instance) that n-1 is a valid index     */
    /* into B_in.                                         */
    
    /* Check to see if B_in is normalized, meaning that   */
    /* B_in->x[n-1] >= 2^31.                              */
    unsigned int k = clz(B_in->x[n-1]);
    
    /* Normalize A_in and B_in. Note that B_in's MSW is   */
    /* the same as B's (normalization does not change it) */
    /* but the same is not necessarily true of A and A_in. */
    ul256 A = {{{0}}};
    A->x[7] = (0) | ((k > 0) ? (A_in->x[6] >> (32-k)) : 0);
    A->x[6] = (A_in->x[6] << k) | ((k > 0) ? (A_in->x[5] >> (32-k)) : 0);
    A->x[5] = (A_in->x[5] << k) | ((k > 0) ? (A_in->x[4] >> (32-k)) : 0);
    A->x[4] = (A_in->x[4] << k) | ((k > 0) ? (A_in->x[3] >> (32-k)) : 0);
    A->x[3] = (A_in->x[3] << k) | ((k > 0) ? (A_in->x[2] >> (32-k)) : 0);
    A->x[2] = (A_in->x[2] << k) | ((k > 0) ? (A_in->x[1] >> (32-k)) : 0);
    A->x[1] = (A_in->x[1] << k) | ((k > 0) ? (A_in->x[0] >> (32-k)) : 0);
    A->x[0] = (A_in->x[0] << k) | (0);
    
    ul256 B = {{{0}}};
    B->x[7] = (0) | ((k > 0) ? (B_in->x[6] >> (32-k)) : 0);
    B->x[6] = (B_in->x[6] << k) | ((k > 0) ? (B_in->x[5] >> (32-k)) : 0);
    B->x[5] = (B_in->x[5] << k) | ((k > 0) ? (B_in->x[4] >> (32-k)) : 0);
    B->x[4] = (B_in->x[4] << k) | ((k > 0) ? (B_in->x[3] >> (32-k)) : 0);
    B->x[3] = (B_in->x[3] << k) | ((k > 0) ? (B_in->x[2] >> (32-k)) : 0);
    B->x[2] = (B_in->x[2] << k) | ((k > 0) ? (B_in->x[1] >> (32-k)) : 0);
    B->x[1] = (B_in->x[1] << k) | ((k > 0) ? (B_in->x[0] >> (32-k)) : 0);
    B->x[0] = (B_in->x[0] << k) | (0);
    
    /* Now we compute m, the difference between the MSW of */
    /* A and B.                                            */
    int m = 8 - n;
    while ((m > 0) && (!A->x[n+m-1]))
        m--;
    /* We know that m >= 0 since A_in >= B_in, which we    */
    /* determined above.                                   */
    
    /* Compute Q->x[m]: */
    {
        ul256 beta_m_B = {{{0}}};
        ul256_lshiftw(beta_m_B, B, m);
        
        if (ul256_cmp(A, beta_m_B) >= 0) {
            Q->x[m] = 1;
            ul256_sub(A, A, beta_m_B);
        }
        else
            Q->x[m] = 0;
    }
    
    /* Compute the rest of Q: */
    for (int j = m-1; j >= 0; j--) {
        uint64_t q_star = ( (((uint64_t)A->x[n+j]) << 32) | ((uint64_t)A->x[n+j-1]) )/((uint64_t)B->x[n-1]);
        Q->x[j] = (q_star < ((uint64_t)0x00000000ffffffff)) ? q_star : 0xffffffff;
        
        /* A <- A - q_j * beta^j * B */
        {
            ul256 qjbj_B = {{{0}}};
            ul256_lshiftw(qjbj_B, B, j);
            ul256_mulu32(qjbj_B, qjbj_B, Q->x[j]);
            ul256_sub(A, A, qjbj_B);
        }
        
        /* If A < 0, roll back Q->x[j] and adjust A: */
        while (A->x[7] & (1 << 31)) {
            Q->x[j]--;
            ul256 bj_B = {{{0}}};
            ul256_lshiftw(bj_B, B, j);
            ul256_add(A, A, bj_B);
        }
    }
    
    /* The remainder is now the de-normalized value of A: */
    R->x[0] = ((k > 0) ? (A->x[1] << (32-k)) : 0) | (A->x[0] >> k);
    R->x[1] = ((k > 0) ? (A->x[2] << (32-k)) : 0) | (A->x[1] >> k);
    R->x[2] = ((k > 0) ? (A->x[3] << (32-k)) : 0) | (A->x[2] >> k);
    R->x[3] = ((k > 0) ? (A->x[4] << (32-k)) : 0) | (A->x[3] >> k);
    R->x[4] = ((k > 0) ? (A->x[5] << (32-k)) : 0) | (A->x[4] >> k);
    R->x[5] = ((k > 0) ? (A->x[6] << (32-k)) : 0) | (A->x[5] >> k);
    R->x[6] = ((k > 0) ? (A->x[7] << (32-k)) : 0) | (A->x[6] >> k);
    ul224_set(Q_, (struct ul224_s *)Q);
    ul224_set(R_, R);
}

int ul224_modinv(ul224 dst, ul224 src, ul224 n);



/*
 * Set the modulus for a mod224
 */
inline void mod224_set(mod224 dst, ul224 n) {
    uint32_t tmp = 0;
    ul224_set(dst->n, n);
    tmp = 2 + n->x[0];
    tmp = tmp * (2 + n->x[0] * tmp);
    tmp = tmp * (2 + n->x[0] * tmp);
    tmp = tmp * (2 + n->x[0] * tmp);
    tmp = tmp * (2 + n->x[0] * tmp);
    dst->np = tmp;
    
    ul224 one = {{{0}}};
    one->x[0] = 1;
    
    ul224_modmul(dst->rsq, one, one, dst); /* dst->rsq <- 1/r */
    ul224_modmul(dst->rsq, dst->rsq, one, dst); /* dst->rsq <- 1/rsq */
    ul224_modinv(dst->rsq, dst->rsq, dst->n); /* dst->rsq <- rsq */
}



#endif
