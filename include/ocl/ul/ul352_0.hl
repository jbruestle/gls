/*
 * AUTOGENERATED tcarstens January 2014
 */
#ifndef __UL352_0__
#define __UL352_0__

#include "../stdint.hl"
#include "../rng.hl"


/*
 * ul352
 */
typedef struct ul352_s {
    uint32_t x[11];
} ul352[1];

inline void ul352_init(ul352 x) { return; }
inline void ul352_clear(ul352 x) { return; }

typedef struct mod352_s {
    ul352 n;
    uint32_t np;
    ul352 rsq;
} mod352[1];




/*
 * Setters
 */
inline void ul352_set_gp(__global struct ul352_s *dst, ul352 src) {
    dst->x[0] = src->x[0];
    dst->x[1] = src->x[1];
    dst->x[2] = src->x[2];
    dst->x[3] = src->x[3];
    dst->x[4] = src->x[4];
    dst->x[5] = src->x[5];
    dst->x[6] = src->x[6];
    dst->x[7] = src->x[7];
    dst->x[8] = src->x[8];
    dst->x[9] = src->x[9];
    dst->x[10] = src->x[10];
}
inline void ul352_set_pg(ul352 dst, __global struct ul352_s *src) {
    dst->x[0] = src->x[0];
    dst->x[1] = src->x[1];
    dst->x[2] = src->x[2];
    dst->x[3] = src->x[3];
    dst->x[4] = src->x[4];
    dst->x[5] = src->x[5];
    dst->x[6] = src->x[6];
    dst->x[7] = src->x[7];
    dst->x[8] = src->x[8];
    dst->x[9] = src->x[9];
    dst->x[10] = src->x[10];
}
inline void ul352_set_gg(__global struct ul352_s *dst, __global struct ul352_s *src) {
    dst->x[0] = src->x[0];
    dst->x[1] = src->x[1];
    dst->x[2] = src->x[2];
    dst->x[3] = src->x[3];
    dst->x[4] = src->x[4];
    dst->x[5] = src->x[5];
    dst->x[6] = src->x[6];
    dst->x[7] = src->x[7];
    dst->x[8] = src->x[8];
    dst->x[9] = src->x[9];
    dst->x[10] = src->x[10];
}
inline void ul352_set(ul352 dst, ul352 src) {
    dst->x[0] = src->x[0];
    dst->x[1] = src->x[1];
    dst->x[2] = src->x[2];
    dst->x[3] = src->x[3];
    dst->x[4] = src->x[4];
    dst->x[5] = src->x[5];
    dst->x[6] = src->x[6];
    dst->x[7] = src->x[7];
    dst->x[8] = src->x[8];
    dst->x[9] = src->x[9];
    dst->x[10] = src->x[10];
}
/*
 * Set a ul352 to a uint32_t
 */
inline void ul352_set_ui(ul352 dst, uint32_t i) {
    dst->x[0] = i;
    dst->x[1] = 0;
    dst->x[2] = 0;
    dst->x[3] = 0;
    dst->x[4] = 0;
    dst->x[5] = 0;
    dst->x[6] = 0;
    dst->x[7] = 0;
    dst->x[8] = 0;
    dst->x[9] = 0;
    dst->x[10] = 0;
}

/*
 * Get a uint32_t out of a ul352
 */
inline uint32_t ul352_get_ui(ul352 src) {
    return src->x[0];
}




/*
 * Generate a random ul352
 */
inline void ul352_rand(struct rng_t *r, ul352 dst) {
    uint64_t w0 = rand_uint64(r);
    uint64_t w1 = rand_uint64(r);
    uint64_t w2 = rand_uint64(r);
    uint64_t w3 = rand_uint64(r);
    uint64_t w4 = rand_uint64(r);
    uint64_t w5 = rand_uint64(r);
    
    dst->x[0] = w0 & 0xffffffff;
    dst->x[1] = w0  >> 32;
    dst->x[2] = w1 & 0xffffffff;
    dst->x[3] = w1  >> 32;
    dst->x[4] = w2 & 0xffffffff;
    dst->x[5] = w2  >> 32;
    dst->x[6] = w3 & 0xffffffff;
    dst->x[7] = w3  >> 32;
    dst->x[8] = w4 & 0xffffffff;
    dst->x[9] = w4  >> 32;
    dst->x[10] = w5 & 0xffffffff;
}



/*
 * Compare two ul352's
 */
inline int ul352_cmp(ul352 src1, ul352 src2) {
    int r = 0;
    if (src1->x[10] > src2->x[10]) r = 1;
    else if (src1->x[10] < src2->x[10]) r = -1;
    else if (src1->x[9] > src2->x[9]) r = 1;
    else if (src1->x[9] < src2->x[9]) r = -1;
    else if (src1->x[8] > src2->x[8]) r = 1;
    else if (src1->x[8] < src2->x[8]) r = -1;
    else if (src1->x[7] > src2->x[7]) r = 1;
    else if (src1->x[7] < src2->x[7]) r = -1;
    else if (src1->x[6] > src2->x[6]) r = 1;
    else if (src1->x[6] < src2->x[6]) r = -1;
    else if (src1->x[5] > src2->x[5]) r = 1;
    else if (src1->x[5] < src2->x[5]) r = -1;
    else if (src1->x[4] > src2->x[4]) r = 1;
    else if (src1->x[4] < src2->x[4]) r = -1;
    else if (src1->x[3] > src2->x[3]) r = 1;
    else if (src1->x[3] < src2->x[3]) r = -1;
    else if (src1->x[2] > src2->x[2]) r = 1;
    else if (src1->x[2] < src2->x[2]) r = -1;
    else if (src1->x[1] > src2->x[1]) r = 1;
    else if (src1->x[1] < src2->x[1]) r = -1;
    else if (src1->x[0] > src2->x[0]) r = 1;
    else if (src1->x[0] < src2->x[0]) r = -1;
    return r;
}

/*
 * Compare a ul352 with a uint32_t
 */
inline int ul352_cmp_ui(ul352 src1, uint32_t src2) {
    int r = 0;
    if (src1->x[10] | src1->x[9] | src1->x[8] | src1->x[7] | src1->x[6] | src1->x[5] | src1->x[4] | src1->x[3] | src1->x[2] |  src1->x[1]) r = 1;
    else if (src1->x[0] > src2) r = 1;
    else if (src1->x[0] < src2) r = -1;
    return r;
}




/*
 * Add two ul352's
 */
inline void ul352_add(ul352 dst, ul352 src1, ul352 src2) {
    #if defined(UL_NVIDIA)
        asm(
          "add.cc.u32  %0, %11, %22;\n\t"
          "addc.cc.u32 %1, %12, %23;\n\t"
          "addc.cc.u32 %2, %13, %24;\n\t"
          "addc.cc.u32 %3, %14, %25;\n\t"
          "addc.cc.u32 %4, %15, %26;\n\t"
          "addc.cc.u32 %5, %16, %27;\n\t"
          "addc.cc.u32 %6, %17, %28;\n\t"
          "addc.cc.u32 %7, %18, %29;\n\t"
          "addc.cc.u32 %8, %19, %30;\n\t"
          "addc.cc.u32 %9, %20, %31;\n\t"
          "addc.u32    %10, %21, %32;\n\t"
          : "=r" (dst->x[0]), "=r" (dst->x[1]), "=r" (dst->x[2]), "=r" (dst->x[3]), "=r" (dst->x[4]), "=r" (dst->x[5]), "=r" (dst->x[6]), "=r" (dst->x[7]), "=r" (dst->x[8]), "=r" (dst->x[9]), "=r" (dst->x[10])
          : "r" (src1->x[0]), "r" (src1->x[1]), "r" (src1->x[2]), "r" (src1->x[3]), "r" (src1->x[4]), "r" (src1->x[5]), "r" (src1->x[6]), "r" (src1->x[7]), "r" (src1->x[8]), "r" (src1->x[9]), "r" (src1->x[10]), 
            "r" (src2->x[0]), "r" (src2->x[1]), "r" (src2->x[2]), "r" (src2->x[3]), "r" (src2->x[4]), "r" (src2->x[5]), "r" (src2->x[6]), "r" (src2->x[7]), "r" (src2->x[8]), "r" (src2->x[9]), "r" (src2->x[10])
          : "cc"
        );
    #else
        ul352 d = {{{0}}};
        d->x[0] = (src1->x[0] & 0x7fffffff) + (src2->x[0] & 0x7fffffff) + 0;
        uint32_t c0 = (src1->x[0] >> 31) + (src2->x[0] >> 31) + (d->x[0] >> 31);
        d->x[0] = (c0 << 31) | (d->x[0] & 0x7fffffff);
        c0 = c0 >> 1;
        dst->x[0] = d->x[0];
        
        d->x[1] = (src1->x[1] & 0x7fffffff) + (src2->x[1] & 0x7fffffff) + c0;
        uint32_t c1 = (src1->x[1] >> 31) + (src2->x[1] >> 31) + (d->x[1] >> 31);
        d->x[1] = (c1 << 31) | (d->x[1] & 0x7fffffff);
        c1 = c1 >> 1;
        dst->x[1] = d->x[1];
        
        d->x[2] = (src1->x[2] & 0x7fffffff) + (src2->x[2] & 0x7fffffff) + c1;
        uint32_t c2 = (src1->x[2] >> 31) + (src2->x[2] >> 31) + (d->x[2] >> 31);
        d->x[2] = (c2 << 31) | (d->x[2] & 0x7fffffff);
        c2 = c2 >> 1;
        dst->x[2] = d->x[2];
        
        d->x[3] = (src1->x[3] & 0x7fffffff) + (src2->x[3] & 0x7fffffff) + c2;
        uint32_t c3 = (src1->x[3] >> 31) + (src2->x[3] >> 31) + (d->x[3] >> 31);
        d->x[3] = (c3 << 31) | (d->x[3] & 0x7fffffff);
        c3 = c3 >> 1;
        dst->x[3] = d->x[3];
        
        d->x[4] = (src1->x[4] & 0x7fffffff) + (src2->x[4] & 0x7fffffff) + c3;
        uint32_t c4 = (src1->x[4] >> 31) + (src2->x[4] >> 31) + (d->x[4] >> 31);
        d->x[4] = (c4 << 31) | (d->x[4] & 0x7fffffff);
        c4 = c4 >> 1;
        dst->x[4] = d->x[4];
        
        d->x[5] = (src1->x[5] & 0x7fffffff) + (src2->x[5] & 0x7fffffff) + c4;
        uint32_t c5 = (src1->x[5] >> 31) + (src2->x[5] >> 31) + (d->x[5] >> 31);
        d->x[5] = (c5 << 31) | (d->x[5] & 0x7fffffff);
        c5 = c5 >> 1;
        dst->x[5] = d->x[5];
        
        d->x[6] = (src1->x[6] & 0x7fffffff) + (src2->x[6] & 0x7fffffff) + c5;
        uint32_t c6 = (src1->x[6] >> 31) + (src2->x[6] >> 31) + (d->x[6] >> 31);
        d->x[6] = (c6 << 31) | (d->x[6] & 0x7fffffff);
        c6 = c6 >> 1;
        dst->x[6] = d->x[6];
        
        d->x[7] = (src1->x[7] & 0x7fffffff) + (src2->x[7] & 0x7fffffff) + c6;
        uint32_t c7 = (src1->x[7] >> 31) + (src2->x[7] >> 31) + (d->x[7] >> 31);
        d->x[7] = (c7 << 31) | (d->x[7] & 0x7fffffff);
        c7 = c7 >> 1;
        dst->x[7] = d->x[7];
        
        d->x[8] = (src1->x[8] & 0x7fffffff) + (src2->x[8] & 0x7fffffff) + c7;
        uint32_t c8 = (src1->x[8] >> 31) + (src2->x[8] >> 31) + (d->x[8] >> 31);
        d->x[8] = (c8 << 31) | (d->x[8] & 0x7fffffff);
        c8 = c8 >> 1;
        dst->x[8] = d->x[8];
        
        d->x[9] = (src1->x[9] & 0x7fffffff) + (src2->x[9] & 0x7fffffff) + c8;
        uint32_t c9 = (src1->x[9] >> 31) + (src2->x[9] >> 31) + (d->x[9] >> 31);
        d->x[9] = (c9 << 31) | (d->x[9] & 0x7fffffff);
        c9 = c9 >> 1;
        dst->x[9] = d->x[9];
        
        d->x[10] = (src1->x[10] & 0x7fffffff) + (src2->x[10] & 0x7fffffff) + c9;
        uint32_t c10 = (src1->x[10] >> 31) + (src2->x[10] >> 31) + (d->x[10] >> 31);
        d->x[10] = (c10 << 31) | (d->x[10] & 0x7fffffff);
        c10 = c10 >> 1;
        dst->x[10] = d->x[10];
        
    #endif
    return;
}
/*
 * Sub two ul352's
 */
inline void ul352_sub(ul352 dst, ul352 src1, ul352 src2) {
    #if defined(UL_NVIDIA)
        asm(
          "sub.cc.u32  %0, %11, %22;\n\t"
          "subc.cc.u32 %1, %12, %23;\n\t"
          "subc.cc.u32 %2, %13, %24;\n\t"
          "subc.cc.u32 %3, %14, %25;\n\t"
          "subc.cc.u32 %4, %15, %26;\n\t"
          "subc.cc.u32 %5, %16, %27;\n\t"
          "subc.cc.u32 %6, %17, %28;\n\t"
          "subc.cc.u32 %7, %18, %29;\n\t"
          "subc.cc.u32 %8, %19, %30;\n\t"
          "subc.cc.u32 %9, %20, %31;\n\t"
          "subc.u32    %10, %21, %32;\n\t"
          : "=r" (dst->x[0]), "=r" (dst->x[1]), "=r" (dst->x[2]), "=r" (dst->x[3]), "=r" (dst->x[4]), "=r" (dst->x[5]), "=r" (dst->x[6]), "=r" (dst->x[7]), "=r" (dst->x[8]), "=r" (dst->x[9]), "=r" (dst->x[10])
          : "r" (src1->x[0]), "r" (src1->x[1]), "r" (src1->x[2]), "r" (src1->x[3]), "r" (src1->x[4]), "r" (src1->x[5]), "r" (src1->x[6]), "r" (src1->x[7]), "r" (src1->x[8]), "r" (src1->x[9]), "r" (src1->x[10]), 
            "r" (src2->x[0]), "r" (src2->x[1]), "r" (src2->x[2]), "r" (src2->x[3]), "r" (src2->x[4]), "r" (src2->x[5]), "r" (src2->x[6]), "r" (src2->x[7]), "r" (src2->x[8]), "r" (src2->x[9]), "r" (src2->x[10])
          : "cc"
        );
    #else
        ul352 d = {{{0}}};
        d->x[0] = (src1->x[0] & 0x7fffffff) - (src2->x[0] & 0x7fffffff) - 0;
        uint32_t b0 = (src1->x[0] >> 31) - (src2->x[0] >> 31) - (d->x[0] >> 31);
        d->x[0] = (b0 << 31) | (d->x[0] & 0x7fffffff);
        b0 = (b0 >> 1) & 1;
        dst->x[0] = d->x[0];
        
        d->x[1] = (src1->x[1] & 0x7fffffff) - (src2->x[1] & 0x7fffffff) - b0;
        uint32_t b1 = (src1->x[1] >> 31) - (src2->x[1] >> 31) - (d->x[1] >> 31);
        d->x[1] = (b1 << 31) | (d->x[1] & 0x7fffffff);
        b1 = (b1 >> 1) & 1;
        dst->x[1] = d->x[1];
        
        d->x[2] = (src1->x[2] & 0x7fffffff) - (src2->x[2] & 0x7fffffff) - b1;
        uint32_t b2 = (src1->x[2] >> 31) - (src2->x[2] >> 31) - (d->x[2] >> 31);
        d->x[2] = (b2 << 31) | (d->x[2] & 0x7fffffff);
        b2 = (b2 >> 1) & 1;
        dst->x[2] = d->x[2];
        
        d->x[3] = (src1->x[3] & 0x7fffffff) - (src2->x[3] & 0x7fffffff) - b2;
        uint32_t b3 = (src1->x[3] >> 31) - (src2->x[3] >> 31) - (d->x[3] >> 31);
        d->x[3] = (b3 << 31) | (d->x[3] & 0x7fffffff);
        b3 = (b3 >> 1) & 1;
        dst->x[3] = d->x[3];
        
        d->x[4] = (src1->x[4] & 0x7fffffff) - (src2->x[4] & 0x7fffffff) - b3;
        uint32_t b4 = (src1->x[4] >> 31) - (src2->x[4] >> 31) - (d->x[4] >> 31);
        d->x[4] = (b4 << 31) | (d->x[4] & 0x7fffffff);
        b4 = (b4 >> 1) & 1;
        dst->x[4] = d->x[4];
        
        d->x[5] = (src1->x[5] & 0x7fffffff) - (src2->x[5] & 0x7fffffff) - b4;
        uint32_t b5 = (src1->x[5] >> 31) - (src2->x[5] >> 31) - (d->x[5] >> 31);
        d->x[5] = (b5 << 31) | (d->x[5] & 0x7fffffff);
        b5 = (b5 >> 1) & 1;
        dst->x[5] = d->x[5];
        
        d->x[6] = (src1->x[6] & 0x7fffffff) - (src2->x[6] & 0x7fffffff) - b5;
        uint32_t b6 = (src1->x[6] >> 31) - (src2->x[6] >> 31) - (d->x[6] >> 31);
        d->x[6] = (b6 << 31) | (d->x[6] & 0x7fffffff);
        b6 = (b6 >> 1) & 1;
        dst->x[6] = d->x[6];
        
        d->x[7] = (src1->x[7] & 0x7fffffff) - (src2->x[7] & 0x7fffffff) - b6;
        uint32_t b7 = (src1->x[7] >> 31) - (src2->x[7] >> 31) - (d->x[7] >> 31);
        d->x[7] = (b7 << 31) | (d->x[7] & 0x7fffffff);
        b7 = (b7 >> 1) & 1;
        dst->x[7] = d->x[7];
        
        d->x[8] = (src1->x[8] & 0x7fffffff) - (src2->x[8] & 0x7fffffff) - b7;
        uint32_t b8 = (src1->x[8] >> 31) - (src2->x[8] >> 31) - (d->x[8] >> 31);
        d->x[8] = (b8 << 31) | (d->x[8] & 0x7fffffff);
        b8 = (b8 >> 1) & 1;
        dst->x[8] = d->x[8];
        
        d->x[9] = (src1->x[9] & 0x7fffffff) - (src2->x[9] & 0x7fffffff) - b8;
        uint32_t b9 = (src1->x[9] >> 31) - (src2->x[9] >> 31) - (d->x[9] >> 31);
        d->x[9] = (b9 << 31) | (d->x[9] & 0x7fffffff);
        b9 = (b9 >> 1) & 1;
        dst->x[9] = d->x[9];
        
        d->x[10] = (src1->x[10] & 0x7fffffff) - (src2->x[10] & 0x7fffffff) - b9;
        uint32_t b10 = (src1->x[10] >> 31) - (src2->x[10] >> 31) - (d->x[10] >> 31);
        d->x[10] = (b10 << 31) | (d->x[10] & 0x7fffffff);
        b10 = (b10 >> 1) & 1;
        dst->x[10] = d->x[10];
        
    #endif
    return;
}
/*
 * Mul two ul352's
 */
inline void ul352_mul(ul352 dst, ul352 src1, ul352 src2) {
    #if defined(UL_NVIDIA)
        asm(
          "mul.lo.u32 %0, %11, %22;\n\t"
          "mul.hi.u32 %1, %11, %22;\n\t"
          "mad.lo.cc.u32 %1, %11, %23, %1;\n\t"
          "madc.hi.u32 %2, %11, %23, 0;\n\t"
          "mad.lo.cc.u32 %1, %12, %22, %1;\n\t"
          "madc.hi.cc.u32 %2, %12, %22, %2;\n\t"
          "madc.lo.u32 %3, %11, %25, 0;\n\t"
          "mad.lo.cc.u32 %2, %11, %24, %2;\n\t"
          "madc.hi.cc.u32 %3, %11, %24, %3;\n\t"
          "madc.lo.u32 %4, %11, %26, 0;\n\t"
          "mad.lo.cc.u32 %2, %12, %23, %2;\n\t"
          "madc.hi.cc.u32 %3, %12, %23, %3;\n\t"
          "madc.lo.cc.u32 %4, %12, %25, %4;\n\t"
          "madc.hi.u32 %5, %12, %25, 0;\n\t"
          "mad.lo.cc.u32 %2, %13, %22, %2;\n\t"
          "madc.hi.cc.u32 %3, %13, %22, %3;\n\t"
          "madc.lo.cc.u32 %4, %13, %24, %4;\n\t"
          "madc.hi.cc.u32 %5, %13, %24, %5;\n\t"
          "madc.lo.u32 %6, %11, %28, 0;\n\t"
          "mad.lo.cc.u32 %3, %12, %24, %3;\n\t"
          "madc.hi.cc.u32 %4, %12, %24, %4;\n\t"
          "madc.lo.cc.u32 %5, %11, %27, %5;\n\t"
          "madc.hi.cc.u32 %6, %11, %27, %6;\n\t"
          "madc.lo.u32 %7, %11, %29, 0;\n\t"
          "mad.lo.cc.u32 %3, %13, %23, %3;\n\t"
          "madc.hi.cc.u32 %4, %13, %23, %4;\n\t"
          "madc.lo.cc.u32 %5, %12, %26, %5;\n\t"
          "madc.hi.cc.u32 %6, %12, %26, %6;\n\t"
          "madc.lo.cc.u32 %7, %12, %28, %7;\n\t"
          "madc.hi.u32 %8, %12, %28, 0;\n\t"
          "mad.lo.cc.u32 %3, %14, %22, %3;\n\t"
          "madc.hi.cc.u32 %4, %14, %22, %4;\n\t"
          "madc.lo.cc.u32 %5, %13, %25, %5;\n\t"
          "madc.hi.cc.u32 %6, %13, %25, %6;\n\t"
          "madc.lo.cc.u32 %7, %13, %27, %7;\n\t"
          "madc.hi.cc.u32 %8, %13, %27, %8;\n\t"
          "madc.lo.u32 %9, %11, %31, 0;\n\t"
          "mad.lo.cc.u32 %4, %14, %23, %4;\n\t"
          "madc.hi.cc.u32 %5, %14, %23, %5;\n\t"
          "madc.lo.cc.u32 %6, %12, %27, %6;\n\t"
          "madc.hi.cc.u32 %7, %12, %27, %7;\n\t"
          "madc.lo.cc.u32 %8, %11, %30, %8;\n\t"
          "madc.hi.cc.u32 %9, %11, %30, %9;\n\t"
          "madc.lo.u32 %10, %11, %32, 0;\n\t"
          "mad.lo.cc.u32 %4, %15, %22, %4;\n\t"
          "madc.hi.cc.u32 %5, %15, %22, %5;\n\t"
          "madc.lo.cc.u32 %6, %13, %26, %6;\n\t"
          "madc.hi.cc.u32 %7, %13, %26, %7;\n\t"
          "madc.lo.cc.u32 %8, %12, %29, %8;\n\t"
          "madc.hi.cc.u32 %9, %12, %29, %9;\n\t"
          "madc.lo.u32 %10, %12, %31, %10;\n\t"
          "mad.hi.cc.u32 %4, %11, %25, %4;\n\t"
          "madc.lo.cc.u32 %5, %14, %24, %5;\n\t"
          "madc.hi.cc.u32 %6, %14, %24, %6;\n\t"
          "madc.lo.cc.u32 %7, %14, %26, %7;\n\t"
          "madc.hi.cc.u32 %8, %14, %26, %8;\n\t"
          "madc.lo.cc.u32 %9, %12, %30, %9;\n\t"
          "madc.hi.u32 %10, %12, %30, %10;\n\t"
          "mad.lo.cc.u32 %5, %15, %23, %5;\n\t"
          "madc.hi.cc.u32 %6, %15, %23, %6;\n\t"
          "madc.lo.cc.u32 %7, %15, %25, %7;\n\t"
          "madc.hi.cc.u32 %8, %15, %25, %8;\n\t"
          "madc.lo.cc.u32 %9, %13, %29, %9;\n\t"
          "madc.hi.u32 %10, %13, %29, %10;\n\t"
          "mad.lo.cc.u32 %5, %16, %22, %5;\n\t"
          "madc.hi.cc.u32 %6, %16, %22, %6;\n\t"
          "madc.lo.cc.u32 %7, %16, %24, %7;\n\t"
          "madc.hi.cc.u32 %8, %16, %24, %8;\n\t"
          "madc.lo.cc.u32 %9, %14, %28, %9;\n\t"
          "madc.hi.u32 %10, %14, %28, %10;\n\t"
          "mad.hi.cc.u32 %5, %11, %26, %5;\n\t"
          "madc.lo.cc.u32 %6, %14, %25, %6;\n\t"
          "madc.hi.cc.u32 %7, %14, %25, %7;\n\t"
          "madc.lo.cc.u32 %8, %13, %28, %8;\n\t"
          "madc.hi.cc.u32 %9, %13, %28, %9;\n\t"
          "madc.lo.u32 %10, %13, %30, %10;\n\t"
          "mad.lo.cc.u32 %6, %15, %24, %6;\n\t"
          "madc.hi.cc.u32 %7, %15, %24, %7;\n\t"
          "madc.lo.cc.u32 %8, %14, %27, %8;\n\t"
          "madc.hi.cc.u32 %9, %14, %27, %9;\n\t"
          "madc.lo.u32 %10, %14, %29, %10;\n\t"
          "mad.lo.cc.u32 %6, %16, %23, %6;\n\t"
          "madc.hi.cc.u32 %7, %16, %23, %7;\n\t"
          "madc.lo.cc.u32 %8, %15, %26, %8;\n\t"
          "madc.hi.cc.u32 %9, %15, %26, %9;\n\t"
          "madc.lo.u32 %10, %15, %28, %10;\n\t"
          "mad.lo.cc.u32 %6, %17, %22, %6;\n\t"
          "madc.hi.cc.u32 %7, %17, %22, %7;\n\t"
          "madc.lo.cc.u32 %8, %16, %25, %8;\n\t"
          "madc.hi.cc.u32 %9, %16, %25, %9;\n\t"
          "madc.lo.u32 %10, %16, %27, %10;\n\t"
          "mad.lo.cc.u32 %7, %17, %23, %7;\n\t"
          "madc.hi.cc.u32 %8, %17, %23, %8;\n\t"
          "madc.lo.cc.u32 %9, %15, %27, %9;\n\t"
          "madc.hi.u32 %10, %15, %27, %10;\n\t"
          "mad.lo.cc.u32 %7, %18, %22, %7;\n\t"
          "madc.hi.cc.u32 %8, %18, %22, %8;\n\t"
          "madc.lo.cc.u32 %9, %16, %26, %9;\n\t"
          "madc.hi.u32 %10, %16, %26, %10;\n\t"
          "mad.hi.cc.u32 %7, %11, %28, %7;\n\t"
          "madc.lo.cc.u32 %8, %17, %24, %8;\n\t"
          "madc.hi.cc.u32 %9, %17, %24, %9;\n\t"
          "madc.lo.u32 %10, %17, %26, %10;\n\t"
          "mad.lo.cc.u32 %8, %18, %23, %8;\n\t"
          "madc.hi.cc.u32 %9, %18, %23, %9;\n\t"
          "madc.lo.u32 %10, %18, %25, %10;\n\t"
          "mad.lo.cc.u32 %8, %19, %22, %8;\n\t"
          "madc.hi.cc.u32 %9, %19, %22, %9;\n\t"
          "madc.lo.u32 %10, %19, %24, %10;\n\t"
          "mad.hi.cc.u32 %8, %11, %29, %8;\n\t"
          "madc.lo.cc.u32 %9, %17, %25, %9;\n\t"
          "madc.hi.u32 %10, %17, %25, %10;\n\t"
          "mad.lo.cc.u32 %9, %18, %24, %9;\n\t"
          "madc.hi.u32 %10, %18, %24, %10;\n\t"
          "mad.lo.cc.u32 %9, %19, %23, %9;\n\t"
          "madc.hi.u32 %10, %19, %23, %10;\n\t"
          "mad.lo.cc.u32 %9, %20, %22, %9;\n\t"
          "madc.hi.u32 %10, %20, %22, %10;\n\t"
          "mad.lo.u32 %10, %20, %23, %10;\n\t"
          "mad.lo.u32 %10, %21, %22, %10;\n\t"
          "mad.hi.u32 %10, %11, %31, %10;\n\t"
          : "=r" (dst->x[0]), "=r" (dst->x[1]), "=r" (dst->x[2]), "=r" (dst->x[3]), "=r" (dst->x[4]), "=r" (dst->x[5]), "=r" (dst->x[6]), "=r" (dst->x[7]), "=r" (dst->x[8]), "=r" (dst->x[9]), "=r" (dst->x[10])
          : "r" (src1->x[0]), "r" (src1->x[1]), "r" (src1->x[2]), "r" (src1->x[3]), "r" (src1->x[4]), "r" (src1->x[5]), "r" (src1->x[6]), "r" (src1->x[7]), "r" (src1->x[8]), "r" (src1->x[9]), "r" (src1->x[10]), 
            "r" (src2->x[0]), "r" (src2->x[1]), "r" (src2->x[2]), "r" (src2->x[3]), "r" (src2->x[4]), "r" (src2->x[5]), "r" (src2->x[6]), "r" (src2->x[7]), "r" (src2->x[8]), "r" (src2->x[9]), "r" (src2->x[10])
          : "cc"
        );
    #else
        ul352 d = {{{0}}};
        
        uint64_t tmp0 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[0]);
        ul352 tmp0_;
        tmp0_->x[0] = tmp0;
        tmp0_->x[1] = tmp0 >> 32;
        tmp0_->x[2] = 0;
        tmp0_->x[3] = 0;
        tmp0_->x[4] = 0;
        tmp0_->x[5] = 0;
        tmp0_->x[6] = 0;
        tmp0_->x[7] = 0;
        tmp0_->x[8] = 0;
        tmp0_->x[9] = 0;
        tmp0_->x[10] = 0;
        ul352_add(d, tmp0_, d);
        
        uint64_t tmp1 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[1]);
        ul352 tmp1_;
        tmp1_->x[0] = 0;
        tmp1_->x[1] = tmp1;
        tmp1_->x[2] = tmp1 >> 32;
        tmp1_->x[3] = 0;
        tmp1_->x[4] = 0;
        tmp1_->x[5] = 0;
        tmp1_->x[6] = 0;
        tmp1_->x[7] = 0;
        tmp1_->x[8] = 0;
        tmp1_->x[9] = 0;
        tmp1_->x[10] = 0;
        ul352_add(d, tmp1_, d);
        
        uint64_t tmp2 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[0]);
        ul352 tmp2_;
        tmp2_->x[0] = 0;
        tmp2_->x[1] = tmp2;
        tmp2_->x[2] = tmp2 >> 32;
        tmp2_->x[3] = 0;
        tmp2_->x[4] = 0;
        tmp2_->x[5] = 0;
        tmp2_->x[6] = 0;
        tmp2_->x[7] = 0;
        tmp2_->x[8] = 0;
        tmp2_->x[9] = 0;
        tmp2_->x[10] = 0;
        ul352_add(d, tmp2_, d);
        
        uint64_t tmp3 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[2]);
        ul352 tmp3_;
        tmp3_->x[0] = 0;
        tmp3_->x[1] = 0;
        tmp3_->x[2] = tmp3;
        tmp3_->x[3] = tmp3 >> 32;
        tmp3_->x[4] = 0;
        tmp3_->x[5] = 0;
        tmp3_->x[6] = 0;
        tmp3_->x[7] = 0;
        tmp3_->x[8] = 0;
        tmp3_->x[9] = 0;
        tmp3_->x[10] = 0;
        ul352_add(d, tmp3_, d);
        
        uint64_t tmp4 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[1]);
        ul352 tmp4_;
        tmp4_->x[0] = 0;
        tmp4_->x[1] = 0;
        tmp4_->x[2] = tmp4;
        tmp4_->x[3] = tmp4 >> 32;
        tmp4_->x[4] = 0;
        tmp4_->x[5] = 0;
        tmp4_->x[6] = 0;
        tmp4_->x[7] = 0;
        tmp4_->x[8] = 0;
        tmp4_->x[9] = 0;
        tmp4_->x[10] = 0;
        ul352_add(d, tmp4_, d);
        
        uint64_t tmp5 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[0]);
        ul352 tmp5_;
        tmp5_->x[0] = 0;
        tmp5_->x[1] = 0;
        tmp5_->x[2] = tmp5;
        tmp5_->x[3] = tmp5 >> 32;
        tmp5_->x[4] = 0;
        tmp5_->x[5] = 0;
        tmp5_->x[6] = 0;
        tmp5_->x[7] = 0;
        tmp5_->x[8] = 0;
        tmp5_->x[9] = 0;
        tmp5_->x[10] = 0;
        ul352_add(d, tmp5_, d);
        
        uint64_t tmp6 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[3]);
        ul352 tmp6_;
        tmp6_->x[0] = 0;
        tmp6_->x[1] = 0;
        tmp6_->x[2] = 0;
        tmp6_->x[3] = tmp6;
        tmp6_->x[4] = tmp6 >> 32;
        tmp6_->x[5] = 0;
        tmp6_->x[6] = 0;
        tmp6_->x[7] = 0;
        tmp6_->x[8] = 0;
        tmp6_->x[9] = 0;
        tmp6_->x[10] = 0;
        ul352_add(d, tmp6_, d);
        
        uint64_t tmp7 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[2]);
        ul352 tmp7_;
        tmp7_->x[0] = 0;
        tmp7_->x[1] = 0;
        tmp7_->x[2] = 0;
        tmp7_->x[3] = tmp7;
        tmp7_->x[4] = tmp7 >> 32;
        tmp7_->x[5] = 0;
        tmp7_->x[6] = 0;
        tmp7_->x[7] = 0;
        tmp7_->x[8] = 0;
        tmp7_->x[9] = 0;
        tmp7_->x[10] = 0;
        ul352_add(d, tmp7_, d);
        
        uint64_t tmp8 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[1]);
        ul352 tmp8_;
        tmp8_->x[0] = 0;
        tmp8_->x[1] = 0;
        tmp8_->x[2] = 0;
        tmp8_->x[3] = tmp8;
        tmp8_->x[4] = tmp8 >> 32;
        tmp8_->x[5] = 0;
        tmp8_->x[6] = 0;
        tmp8_->x[7] = 0;
        tmp8_->x[8] = 0;
        tmp8_->x[9] = 0;
        tmp8_->x[10] = 0;
        ul352_add(d, tmp8_, d);
        
        uint64_t tmp9 = ((uint64_t)src1->x[3]) * ((uint64_t)src2->x[0]);
        ul352 tmp9_;
        tmp9_->x[0] = 0;
        tmp9_->x[1] = 0;
        tmp9_->x[2] = 0;
        tmp9_->x[3] = tmp9;
        tmp9_->x[4] = tmp9 >> 32;
        tmp9_->x[5] = 0;
        tmp9_->x[6] = 0;
        tmp9_->x[7] = 0;
        tmp9_->x[8] = 0;
        tmp9_->x[9] = 0;
        tmp9_->x[10] = 0;
        ul352_add(d, tmp9_, d);
        
        uint64_t tmp10 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[4]);
        ul352 tmp10_;
        tmp10_->x[0] = 0;
        tmp10_->x[1] = 0;
        tmp10_->x[2] = 0;
        tmp10_->x[3] = 0;
        tmp10_->x[4] = tmp10;
        tmp10_->x[5] = tmp10 >> 32;
        tmp10_->x[6] = 0;
        tmp10_->x[7] = 0;
        tmp10_->x[8] = 0;
        tmp10_->x[9] = 0;
        tmp10_->x[10] = 0;
        ul352_add(d, tmp10_, d);
        
        uint64_t tmp11 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[3]);
        ul352 tmp11_;
        tmp11_->x[0] = 0;
        tmp11_->x[1] = 0;
        tmp11_->x[2] = 0;
        tmp11_->x[3] = 0;
        tmp11_->x[4] = tmp11;
        tmp11_->x[5] = tmp11 >> 32;
        tmp11_->x[6] = 0;
        tmp11_->x[7] = 0;
        tmp11_->x[8] = 0;
        tmp11_->x[9] = 0;
        tmp11_->x[10] = 0;
        ul352_add(d, tmp11_, d);
        
        uint64_t tmp12 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[2]);
        ul352 tmp12_;
        tmp12_->x[0] = 0;
        tmp12_->x[1] = 0;
        tmp12_->x[2] = 0;
        tmp12_->x[3] = 0;
        tmp12_->x[4] = tmp12;
        tmp12_->x[5] = tmp12 >> 32;
        tmp12_->x[6] = 0;
        tmp12_->x[7] = 0;
        tmp12_->x[8] = 0;
        tmp12_->x[9] = 0;
        tmp12_->x[10] = 0;
        ul352_add(d, tmp12_, d);
        
        uint64_t tmp13 = ((uint64_t)src1->x[3]) * ((uint64_t)src2->x[1]);
        ul352 tmp13_;
        tmp13_->x[0] = 0;
        tmp13_->x[1] = 0;
        tmp13_->x[2] = 0;
        tmp13_->x[3] = 0;
        tmp13_->x[4] = tmp13;
        tmp13_->x[5] = tmp13 >> 32;
        tmp13_->x[6] = 0;
        tmp13_->x[7] = 0;
        tmp13_->x[8] = 0;
        tmp13_->x[9] = 0;
        tmp13_->x[10] = 0;
        ul352_add(d, tmp13_, d);
        
        uint64_t tmp14 = ((uint64_t)src1->x[4]) * ((uint64_t)src2->x[0]);
        ul352 tmp14_;
        tmp14_->x[0] = 0;
        tmp14_->x[1] = 0;
        tmp14_->x[2] = 0;
        tmp14_->x[3] = 0;
        tmp14_->x[4] = tmp14;
        tmp14_->x[5] = tmp14 >> 32;
        tmp14_->x[6] = 0;
        tmp14_->x[7] = 0;
        tmp14_->x[8] = 0;
        tmp14_->x[9] = 0;
        tmp14_->x[10] = 0;
        ul352_add(d, tmp14_, d);
        
        uint64_t tmp15 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[5]);
        ul352 tmp15_;
        tmp15_->x[0] = 0;
        tmp15_->x[1] = 0;
        tmp15_->x[2] = 0;
        tmp15_->x[3] = 0;
        tmp15_->x[4] = 0;
        tmp15_->x[5] = tmp15;
        tmp15_->x[6] = tmp15 >> 32;
        tmp15_->x[7] = 0;
        tmp15_->x[8] = 0;
        tmp15_->x[9] = 0;
        tmp15_->x[10] = 0;
        ul352_add(d, tmp15_, d);
        
        uint64_t tmp16 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[4]);
        ul352 tmp16_;
        tmp16_->x[0] = 0;
        tmp16_->x[1] = 0;
        tmp16_->x[2] = 0;
        tmp16_->x[3] = 0;
        tmp16_->x[4] = 0;
        tmp16_->x[5] = tmp16;
        tmp16_->x[6] = tmp16 >> 32;
        tmp16_->x[7] = 0;
        tmp16_->x[8] = 0;
        tmp16_->x[9] = 0;
        tmp16_->x[10] = 0;
        ul352_add(d, tmp16_, d);
        
        uint64_t tmp17 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[3]);
        ul352 tmp17_;
        tmp17_->x[0] = 0;
        tmp17_->x[1] = 0;
        tmp17_->x[2] = 0;
        tmp17_->x[3] = 0;
        tmp17_->x[4] = 0;
        tmp17_->x[5] = tmp17;
        tmp17_->x[6] = tmp17 >> 32;
        tmp17_->x[7] = 0;
        tmp17_->x[8] = 0;
        tmp17_->x[9] = 0;
        tmp17_->x[10] = 0;
        ul352_add(d, tmp17_, d);
        
        uint64_t tmp18 = ((uint64_t)src1->x[3]) * ((uint64_t)src2->x[2]);
        ul352 tmp18_;
        tmp18_->x[0] = 0;
        tmp18_->x[1] = 0;
        tmp18_->x[2] = 0;
        tmp18_->x[3] = 0;
        tmp18_->x[4] = 0;
        tmp18_->x[5] = tmp18;
        tmp18_->x[6] = tmp18 >> 32;
        tmp18_->x[7] = 0;
        tmp18_->x[8] = 0;
        tmp18_->x[9] = 0;
        tmp18_->x[10] = 0;
        ul352_add(d, tmp18_, d);
        
        uint64_t tmp19 = ((uint64_t)src1->x[4]) * ((uint64_t)src2->x[1]);
        ul352 tmp19_;
        tmp19_->x[0] = 0;
        tmp19_->x[1] = 0;
        tmp19_->x[2] = 0;
        tmp19_->x[3] = 0;
        tmp19_->x[4] = 0;
        tmp19_->x[5] = tmp19;
        tmp19_->x[6] = tmp19 >> 32;
        tmp19_->x[7] = 0;
        tmp19_->x[8] = 0;
        tmp19_->x[9] = 0;
        tmp19_->x[10] = 0;
        ul352_add(d, tmp19_, d);
        
        uint64_t tmp20 = ((uint64_t)src1->x[5]) * ((uint64_t)src2->x[0]);
        ul352 tmp20_;
        tmp20_->x[0] = 0;
        tmp20_->x[1] = 0;
        tmp20_->x[2] = 0;
        tmp20_->x[3] = 0;
        tmp20_->x[4] = 0;
        tmp20_->x[5] = tmp20;
        tmp20_->x[6] = tmp20 >> 32;
        tmp20_->x[7] = 0;
        tmp20_->x[8] = 0;
        tmp20_->x[9] = 0;
        tmp20_->x[10] = 0;
        ul352_add(d, tmp20_, d);
        
        uint64_t tmp21 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[6]);
        ul352 tmp21_;
        tmp21_->x[0] = 0;
        tmp21_->x[1] = 0;
        tmp21_->x[2] = 0;
        tmp21_->x[3] = 0;
        tmp21_->x[4] = 0;
        tmp21_->x[5] = 0;
        tmp21_->x[6] = tmp21;
        tmp21_->x[7] = tmp21 >> 32;
        tmp21_->x[8] = 0;
        tmp21_->x[9] = 0;
        tmp21_->x[10] = 0;
        ul352_add(d, tmp21_, d);
        
        uint64_t tmp22 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[5]);
        ul352 tmp22_;
        tmp22_->x[0] = 0;
        tmp22_->x[1] = 0;
        tmp22_->x[2] = 0;
        tmp22_->x[3] = 0;
        tmp22_->x[4] = 0;
        tmp22_->x[5] = 0;
        tmp22_->x[6] = tmp22;
        tmp22_->x[7] = tmp22 >> 32;
        tmp22_->x[8] = 0;
        tmp22_->x[9] = 0;
        tmp22_->x[10] = 0;
        ul352_add(d, tmp22_, d);
        
        uint64_t tmp23 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[4]);
        ul352 tmp23_;
        tmp23_->x[0] = 0;
        tmp23_->x[1] = 0;
        tmp23_->x[2] = 0;
        tmp23_->x[3] = 0;
        tmp23_->x[4] = 0;
        tmp23_->x[5] = 0;
        tmp23_->x[6] = tmp23;
        tmp23_->x[7] = tmp23 >> 32;
        tmp23_->x[8] = 0;
        tmp23_->x[9] = 0;
        tmp23_->x[10] = 0;
        ul352_add(d, tmp23_, d);
        
        uint64_t tmp24 = ((uint64_t)src1->x[3]) * ((uint64_t)src2->x[3]);
        ul352 tmp24_;
        tmp24_->x[0] = 0;
        tmp24_->x[1] = 0;
        tmp24_->x[2] = 0;
        tmp24_->x[3] = 0;
        tmp24_->x[4] = 0;
        tmp24_->x[5] = 0;
        tmp24_->x[6] = tmp24;
        tmp24_->x[7] = tmp24 >> 32;
        tmp24_->x[8] = 0;
        tmp24_->x[9] = 0;
        tmp24_->x[10] = 0;
        ul352_add(d, tmp24_, d);
        
        uint64_t tmp25 = ((uint64_t)src1->x[4]) * ((uint64_t)src2->x[2]);
        ul352 tmp25_;
        tmp25_->x[0] = 0;
        tmp25_->x[1] = 0;
        tmp25_->x[2] = 0;
        tmp25_->x[3] = 0;
        tmp25_->x[4] = 0;
        tmp25_->x[5] = 0;
        tmp25_->x[6] = tmp25;
        tmp25_->x[7] = tmp25 >> 32;
        tmp25_->x[8] = 0;
        tmp25_->x[9] = 0;
        tmp25_->x[10] = 0;
        ul352_add(d, tmp25_, d);
        
        uint64_t tmp26 = ((uint64_t)src1->x[5]) * ((uint64_t)src2->x[1]);
        ul352 tmp26_;
        tmp26_->x[0] = 0;
        tmp26_->x[1] = 0;
        tmp26_->x[2] = 0;
        tmp26_->x[3] = 0;
        tmp26_->x[4] = 0;
        tmp26_->x[5] = 0;
        tmp26_->x[6] = tmp26;
        tmp26_->x[7] = tmp26 >> 32;
        tmp26_->x[8] = 0;
        tmp26_->x[9] = 0;
        tmp26_->x[10] = 0;
        ul352_add(d, tmp26_, d);
        
        uint64_t tmp27 = ((uint64_t)src1->x[6]) * ((uint64_t)src2->x[0]);
        ul352 tmp27_;
        tmp27_->x[0] = 0;
        tmp27_->x[1] = 0;
        tmp27_->x[2] = 0;
        tmp27_->x[3] = 0;
        tmp27_->x[4] = 0;
        tmp27_->x[5] = 0;
        tmp27_->x[6] = tmp27;
        tmp27_->x[7] = tmp27 >> 32;
        tmp27_->x[8] = 0;
        tmp27_->x[9] = 0;
        tmp27_->x[10] = 0;
        ul352_add(d, tmp27_, d);
        
        uint64_t tmp28 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[7]);
        ul352 tmp28_;
        tmp28_->x[0] = 0;
        tmp28_->x[1] = 0;
        tmp28_->x[2] = 0;
        tmp28_->x[3] = 0;
        tmp28_->x[4] = 0;
        tmp28_->x[5] = 0;
        tmp28_->x[6] = 0;
        tmp28_->x[7] = tmp28;
        tmp28_->x[8] = tmp28 >> 32;
        tmp28_->x[9] = 0;
        tmp28_->x[10] = 0;
        ul352_add(d, tmp28_, d);
        
        uint64_t tmp29 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[6]);
        ul352 tmp29_;
        tmp29_->x[0] = 0;
        tmp29_->x[1] = 0;
        tmp29_->x[2] = 0;
        tmp29_->x[3] = 0;
        tmp29_->x[4] = 0;
        tmp29_->x[5] = 0;
        tmp29_->x[6] = 0;
        tmp29_->x[7] = tmp29;
        tmp29_->x[8] = tmp29 >> 32;
        tmp29_->x[9] = 0;
        tmp29_->x[10] = 0;
        ul352_add(d, tmp29_, d);
        
        uint64_t tmp30 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[5]);
        ul352 tmp30_;
        tmp30_->x[0] = 0;
        tmp30_->x[1] = 0;
        tmp30_->x[2] = 0;
        tmp30_->x[3] = 0;
        tmp30_->x[4] = 0;
        tmp30_->x[5] = 0;
        tmp30_->x[6] = 0;
        tmp30_->x[7] = tmp30;
        tmp30_->x[8] = tmp30 >> 32;
        tmp30_->x[9] = 0;
        tmp30_->x[10] = 0;
        ul352_add(d, tmp30_, d);
        
        uint64_t tmp31 = ((uint64_t)src1->x[3]) * ((uint64_t)src2->x[4]);
        ul352 tmp31_;
        tmp31_->x[0] = 0;
        tmp31_->x[1] = 0;
        tmp31_->x[2] = 0;
        tmp31_->x[3] = 0;
        tmp31_->x[4] = 0;
        tmp31_->x[5] = 0;
        tmp31_->x[6] = 0;
        tmp31_->x[7] = tmp31;
        tmp31_->x[8] = tmp31 >> 32;
        tmp31_->x[9] = 0;
        tmp31_->x[10] = 0;
        ul352_add(d, tmp31_, d);
        
        uint64_t tmp32 = ((uint64_t)src1->x[4]) * ((uint64_t)src2->x[3]);
        ul352 tmp32_;
        tmp32_->x[0] = 0;
        tmp32_->x[1] = 0;
        tmp32_->x[2] = 0;
        tmp32_->x[3] = 0;
        tmp32_->x[4] = 0;
        tmp32_->x[5] = 0;
        tmp32_->x[6] = 0;
        tmp32_->x[7] = tmp32;
        tmp32_->x[8] = tmp32 >> 32;
        tmp32_->x[9] = 0;
        tmp32_->x[10] = 0;
        ul352_add(d, tmp32_, d);
        
        uint64_t tmp33 = ((uint64_t)src1->x[5]) * ((uint64_t)src2->x[2]);
        ul352 tmp33_;
        tmp33_->x[0] = 0;
        tmp33_->x[1] = 0;
        tmp33_->x[2] = 0;
        tmp33_->x[3] = 0;
        tmp33_->x[4] = 0;
        tmp33_->x[5] = 0;
        tmp33_->x[6] = 0;
        tmp33_->x[7] = tmp33;
        tmp33_->x[8] = tmp33 >> 32;
        tmp33_->x[9] = 0;
        tmp33_->x[10] = 0;
        ul352_add(d, tmp33_, d);
        
        uint64_t tmp34 = ((uint64_t)src1->x[6]) * ((uint64_t)src2->x[1]);
        ul352 tmp34_;
        tmp34_->x[0] = 0;
        tmp34_->x[1] = 0;
        tmp34_->x[2] = 0;
        tmp34_->x[3] = 0;
        tmp34_->x[4] = 0;
        tmp34_->x[5] = 0;
        tmp34_->x[6] = 0;
        tmp34_->x[7] = tmp34;
        tmp34_->x[8] = tmp34 >> 32;
        tmp34_->x[9] = 0;
        tmp34_->x[10] = 0;
        ul352_add(d, tmp34_, d);
        
        uint64_t tmp35 = ((uint64_t)src1->x[7]) * ((uint64_t)src2->x[0]);
        ul352 tmp35_;
        tmp35_->x[0] = 0;
        tmp35_->x[1] = 0;
        tmp35_->x[2] = 0;
        tmp35_->x[3] = 0;
        tmp35_->x[4] = 0;
        tmp35_->x[5] = 0;
        tmp35_->x[6] = 0;
        tmp35_->x[7] = tmp35;
        tmp35_->x[8] = tmp35 >> 32;
        tmp35_->x[9] = 0;
        tmp35_->x[10] = 0;
        ul352_add(d, tmp35_, d);
        
        uint64_t tmp36 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[8]);
        ul352 tmp36_;
        tmp36_->x[0] = 0;
        tmp36_->x[1] = 0;
        tmp36_->x[2] = 0;
        tmp36_->x[3] = 0;
        tmp36_->x[4] = 0;
        tmp36_->x[5] = 0;
        tmp36_->x[6] = 0;
        tmp36_->x[7] = 0;
        tmp36_->x[8] = tmp36;
        tmp36_->x[9] = tmp36 >> 32;
        tmp36_->x[10] = 0;
        ul352_add(d, tmp36_, d);
        
        uint64_t tmp37 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[7]);
        ul352 tmp37_;
        tmp37_->x[0] = 0;
        tmp37_->x[1] = 0;
        tmp37_->x[2] = 0;
        tmp37_->x[3] = 0;
        tmp37_->x[4] = 0;
        tmp37_->x[5] = 0;
        tmp37_->x[6] = 0;
        tmp37_->x[7] = 0;
        tmp37_->x[8] = tmp37;
        tmp37_->x[9] = tmp37 >> 32;
        tmp37_->x[10] = 0;
        ul352_add(d, tmp37_, d);
        
        uint64_t tmp38 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[6]);
        ul352 tmp38_;
        tmp38_->x[0] = 0;
        tmp38_->x[1] = 0;
        tmp38_->x[2] = 0;
        tmp38_->x[3] = 0;
        tmp38_->x[4] = 0;
        tmp38_->x[5] = 0;
        tmp38_->x[6] = 0;
        tmp38_->x[7] = 0;
        tmp38_->x[8] = tmp38;
        tmp38_->x[9] = tmp38 >> 32;
        tmp38_->x[10] = 0;
        ul352_add(d, tmp38_, d);
        
        uint64_t tmp39 = ((uint64_t)src1->x[3]) * ((uint64_t)src2->x[5]);
        ul352 tmp39_;
        tmp39_->x[0] = 0;
        tmp39_->x[1] = 0;
        tmp39_->x[2] = 0;
        tmp39_->x[3] = 0;
        tmp39_->x[4] = 0;
        tmp39_->x[5] = 0;
        tmp39_->x[6] = 0;
        tmp39_->x[7] = 0;
        tmp39_->x[8] = tmp39;
        tmp39_->x[9] = tmp39 >> 32;
        tmp39_->x[10] = 0;
        ul352_add(d, tmp39_, d);
        
        uint64_t tmp40 = ((uint64_t)src1->x[4]) * ((uint64_t)src2->x[4]);
        ul352 tmp40_;
        tmp40_->x[0] = 0;
        tmp40_->x[1] = 0;
        tmp40_->x[2] = 0;
        tmp40_->x[3] = 0;
        tmp40_->x[4] = 0;
        tmp40_->x[5] = 0;
        tmp40_->x[6] = 0;
        tmp40_->x[7] = 0;
        tmp40_->x[8] = tmp40;
        tmp40_->x[9] = tmp40 >> 32;
        tmp40_->x[10] = 0;
        ul352_add(d, tmp40_, d);
        
        uint64_t tmp41 = ((uint64_t)src1->x[5]) * ((uint64_t)src2->x[3]);
        ul352 tmp41_;
        tmp41_->x[0] = 0;
        tmp41_->x[1] = 0;
        tmp41_->x[2] = 0;
        tmp41_->x[3] = 0;
        tmp41_->x[4] = 0;
        tmp41_->x[5] = 0;
        tmp41_->x[6] = 0;
        tmp41_->x[7] = 0;
        tmp41_->x[8] = tmp41;
        tmp41_->x[9] = tmp41 >> 32;
        tmp41_->x[10] = 0;
        ul352_add(d, tmp41_, d);
        
        uint64_t tmp42 = ((uint64_t)src1->x[6]) * ((uint64_t)src2->x[2]);
        ul352 tmp42_;
        tmp42_->x[0] = 0;
        tmp42_->x[1] = 0;
        tmp42_->x[2] = 0;
        tmp42_->x[3] = 0;
        tmp42_->x[4] = 0;
        tmp42_->x[5] = 0;
        tmp42_->x[6] = 0;
        tmp42_->x[7] = 0;
        tmp42_->x[8] = tmp42;
        tmp42_->x[9] = tmp42 >> 32;
        tmp42_->x[10] = 0;
        ul352_add(d, tmp42_, d);
        
        uint64_t tmp43 = ((uint64_t)src1->x[7]) * ((uint64_t)src2->x[1]);
        ul352 tmp43_;
        tmp43_->x[0] = 0;
        tmp43_->x[1] = 0;
        tmp43_->x[2] = 0;
        tmp43_->x[3] = 0;
        tmp43_->x[4] = 0;
        tmp43_->x[5] = 0;
        tmp43_->x[6] = 0;
        tmp43_->x[7] = 0;
        tmp43_->x[8] = tmp43;
        tmp43_->x[9] = tmp43 >> 32;
        tmp43_->x[10] = 0;
        ul352_add(d, tmp43_, d);
        
        uint64_t tmp44 = ((uint64_t)src1->x[8]) * ((uint64_t)src2->x[0]);
        ul352 tmp44_;
        tmp44_->x[0] = 0;
        tmp44_->x[1] = 0;
        tmp44_->x[2] = 0;
        tmp44_->x[3] = 0;
        tmp44_->x[4] = 0;
        tmp44_->x[5] = 0;
        tmp44_->x[6] = 0;
        tmp44_->x[7] = 0;
        tmp44_->x[8] = tmp44;
        tmp44_->x[9] = tmp44 >> 32;
        tmp44_->x[10] = 0;
        ul352_add(d, tmp44_, d);
        
        uint64_t tmp45 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[9]);
        ul352 tmp45_;
        tmp45_->x[0] = 0;
        tmp45_->x[1] = 0;
        tmp45_->x[2] = 0;
        tmp45_->x[3] = 0;
        tmp45_->x[4] = 0;
        tmp45_->x[5] = 0;
        tmp45_->x[6] = 0;
        tmp45_->x[7] = 0;
        tmp45_->x[8] = 0;
        tmp45_->x[9] = tmp45;
        tmp45_->x[10] = tmp45 >> 32;
        ul352_add(d, tmp45_, d);
        
        uint64_t tmp46 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[8]);
        ul352 tmp46_;
        tmp46_->x[0] = 0;
        tmp46_->x[1] = 0;
        tmp46_->x[2] = 0;
        tmp46_->x[3] = 0;
        tmp46_->x[4] = 0;
        tmp46_->x[5] = 0;
        tmp46_->x[6] = 0;
        tmp46_->x[7] = 0;
        tmp46_->x[8] = 0;
        tmp46_->x[9] = tmp46;
        tmp46_->x[10] = tmp46 >> 32;
        ul352_add(d, tmp46_, d);
        
        uint64_t tmp47 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[7]);
        ul352 tmp47_;
        tmp47_->x[0] = 0;
        tmp47_->x[1] = 0;
        tmp47_->x[2] = 0;
        tmp47_->x[3] = 0;
        tmp47_->x[4] = 0;
        tmp47_->x[5] = 0;
        tmp47_->x[6] = 0;
        tmp47_->x[7] = 0;
        tmp47_->x[8] = 0;
        tmp47_->x[9] = tmp47;
        tmp47_->x[10] = tmp47 >> 32;
        ul352_add(d, tmp47_, d);
        
        uint64_t tmp48 = ((uint64_t)src1->x[3]) * ((uint64_t)src2->x[6]);
        ul352 tmp48_;
        tmp48_->x[0] = 0;
        tmp48_->x[1] = 0;
        tmp48_->x[2] = 0;
        tmp48_->x[3] = 0;
        tmp48_->x[4] = 0;
        tmp48_->x[5] = 0;
        tmp48_->x[6] = 0;
        tmp48_->x[7] = 0;
        tmp48_->x[8] = 0;
        tmp48_->x[9] = tmp48;
        tmp48_->x[10] = tmp48 >> 32;
        ul352_add(d, tmp48_, d);
        
        uint64_t tmp49 = ((uint64_t)src1->x[4]) * ((uint64_t)src2->x[5]);
        ul352 tmp49_;
        tmp49_->x[0] = 0;
        tmp49_->x[1] = 0;
        tmp49_->x[2] = 0;
        tmp49_->x[3] = 0;
        tmp49_->x[4] = 0;
        tmp49_->x[5] = 0;
        tmp49_->x[6] = 0;
        tmp49_->x[7] = 0;
        tmp49_->x[8] = 0;
        tmp49_->x[9] = tmp49;
        tmp49_->x[10] = tmp49 >> 32;
        ul352_add(d, tmp49_, d);
        
        uint64_t tmp50 = ((uint64_t)src1->x[5]) * ((uint64_t)src2->x[4]);
        ul352 tmp50_;
        tmp50_->x[0] = 0;
        tmp50_->x[1] = 0;
        tmp50_->x[2] = 0;
        tmp50_->x[3] = 0;
        tmp50_->x[4] = 0;
        tmp50_->x[5] = 0;
        tmp50_->x[6] = 0;
        tmp50_->x[7] = 0;
        tmp50_->x[8] = 0;
        tmp50_->x[9] = tmp50;
        tmp50_->x[10] = tmp50 >> 32;
        ul352_add(d, tmp50_, d);
        
        uint64_t tmp51 = ((uint64_t)src1->x[6]) * ((uint64_t)src2->x[3]);
        ul352 tmp51_;
        tmp51_->x[0] = 0;
        tmp51_->x[1] = 0;
        tmp51_->x[2] = 0;
        tmp51_->x[3] = 0;
        tmp51_->x[4] = 0;
        tmp51_->x[5] = 0;
        tmp51_->x[6] = 0;
        tmp51_->x[7] = 0;
        tmp51_->x[8] = 0;
        tmp51_->x[9] = tmp51;
        tmp51_->x[10] = tmp51 >> 32;
        ul352_add(d, tmp51_, d);
        
        uint64_t tmp52 = ((uint64_t)src1->x[7]) * ((uint64_t)src2->x[2]);
        ul352 tmp52_;
        tmp52_->x[0] = 0;
        tmp52_->x[1] = 0;
        tmp52_->x[2] = 0;
        tmp52_->x[3] = 0;
        tmp52_->x[4] = 0;
        tmp52_->x[5] = 0;
        tmp52_->x[6] = 0;
        tmp52_->x[7] = 0;
        tmp52_->x[8] = 0;
        tmp52_->x[9] = tmp52;
        tmp52_->x[10] = tmp52 >> 32;
        ul352_add(d, tmp52_, d);
        
        uint64_t tmp53 = ((uint64_t)src1->x[8]) * ((uint64_t)src2->x[1]);
        ul352 tmp53_;
        tmp53_->x[0] = 0;
        tmp53_->x[1] = 0;
        tmp53_->x[2] = 0;
        tmp53_->x[3] = 0;
        tmp53_->x[4] = 0;
        tmp53_->x[5] = 0;
        tmp53_->x[6] = 0;
        tmp53_->x[7] = 0;
        tmp53_->x[8] = 0;
        tmp53_->x[9] = tmp53;
        tmp53_->x[10] = tmp53 >> 32;
        ul352_add(d, tmp53_, d);
        
        uint64_t tmp54 = ((uint64_t)src1->x[9]) * ((uint64_t)src2->x[0]);
        ul352 tmp54_;
        tmp54_->x[0] = 0;
        tmp54_->x[1] = 0;
        tmp54_->x[2] = 0;
        tmp54_->x[3] = 0;
        tmp54_->x[4] = 0;
        tmp54_->x[5] = 0;
        tmp54_->x[6] = 0;
        tmp54_->x[7] = 0;
        tmp54_->x[8] = 0;
        tmp54_->x[9] = tmp54;
        tmp54_->x[10] = tmp54 >> 32;
        ul352_add(d, tmp54_, d);
        
        uint64_t tmp55 = ((uint64_t)src1->x[0]) * ((uint64_t)src2->x[10]);
        ul352 tmp55_;
        tmp55_->x[0] = 0;
        tmp55_->x[1] = 0;
        tmp55_->x[2] = 0;
        tmp55_->x[3] = 0;
        tmp55_->x[4] = 0;
        tmp55_->x[5] = 0;
        tmp55_->x[6] = 0;
        tmp55_->x[7] = 0;
        tmp55_->x[8] = 0;
        tmp55_->x[9] = 0;
        tmp55_->x[10] = tmp55;
        ul352_add(d, tmp55_, d);
        
        uint64_t tmp56 = ((uint64_t)src1->x[1]) * ((uint64_t)src2->x[9]);
        ul352 tmp56_;
        tmp56_->x[0] = 0;
        tmp56_->x[1] = 0;
        tmp56_->x[2] = 0;
        tmp56_->x[3] = 0;
        tmp56_->x[4] = 0;
        tmp56_->x[5] = 0;
        tmp56_->x[6] = 0;
        tmp56_->x[7] = 0;
        tmp56_->x[8] = 0;
        tmp56_->x[9] = 0;
        tmp56_->x[10] = tmp56;
        ul352_add(d, tmp56_, d);
        
        uint64_t tmp57 = ((uint64_t)src1->x[2]) * ((uint64_t)src2->x[8]);
        ul352 tmp57_;
        tmp57_->x[0] = 0;
        tmp57_->x[1] = 0;
        tmp57_->x[2] = 0;
        tmp57_->x[3] = 0;
        tmp57_->x[4] = 0;
        tmp57_->x[5] = 0;
        tmp57_->x[6] = 0;
        tmp57_->x[7] = 0;
        tmp57_->x[8] = 0;
        tmp57_->x[9] = 0;
        tmp57_->x[10] = tmp57;
        ul352_add(d, tmp57_, d);
        
        uint64_t tmp58 = ((uint64_t)src1->x[3]) * ((uint64_t)src2->x[7]);
        ul352 tmp58_;
        tmp58_->x[0] = 0;
        tmp58_->x[1] = 0;
        tmp58_->x[2] = 0;
        tmp58_->x[3] = 0;
        tmp58_->x[4] = 0;
        tmp58_->x[5] = 0;
        tmp58_->x[6] = 0;
        tmp58_->x[7] = 0;
        tmp58_->x[8] = 0;
        tmp58_->x[9] = 0;
        tmp58_->x[10] = tmp58;
        ul352_add(d, tmp58_, d);
        
        uint64_t tmp59 = ((uint64_t)src1->x[4]) * ((uint64_t)src2->x[6]);
        ul352 tmp59_;
        tmp59_->x[0] = 0;
        tmp59_->x[1] = 0;
        tmp59_->x[2] = 0;
        tmp59_->x[3] = 0;
        tmp59_->x[4] = 0;
        tmp59_->x[5] = 0;
        tmp59_->x[6] = 0;
        tmp59_->x[7] = 0;
        tmp59_->x[8] = 0;
        tmp59_->x[9] = 0;
        tmp59_->x[10] = tmp59;
        ul352_add(d, tmp59_, d);
        
        uint64_t tmp60 = ((uint64_t)src1->x[5]) * ((uint64_t)src2->x[5]);
        ul352 tmp60_;
        tmp60_->x[0] = 0;
        tmp60_->x[1] = 0;
        tmp60_->x[2] = 0;
        tmp60_->x[3] = 0;
        tmp60_->x[4] = 0;
        tmp60_->x[5] = 0;
        tmp60_->x[6] = 0;
        tmp60_->x[7] = 0;
        tmp60_->x[8] = 0;
        tmp60_->x[9] = 0;
        tmp60_->x[10] = tmp60;
        ul352_add(d, tmp60_, d);
        
        uint64_t tmp61 = ((uint64_t)src1->x[6]) * ((uint64_t)src2->x[4]);
        ul352 tmp61_;
        tmp61_->x[0] = 0;
        tmp61_->x[1] = 0;
        tmp61_->x[2] = 0;
        tmp61_->x[3] = 0;
        tmp61_->x[4] = 0;
        tmp61_->x[5] = 0;
        tmp61_->x[6] = 0;
        tmp61_->x[7] = 0;
        tmp61_->x[8] = 0;
        tmp61_->x[9] = 0;
        tmp61_->x[10] = tmp61;
        ul352_add(d, tmp61_, d);
        
        uint64_t tmp62 = ((uint64_t)src1->x[7]) * ((uint64_t)src2->x[3]);
        ul352 tmp62_;
        tmp62_->x[0] = 0;
        tmp62_->x[1] = 0;
        tmp62_->x[2] = 0;
        tmp62_->x[3] = 0;
        tmp62_->x[4] = 0;
        tmp62_->x[5] = 0;
        tmp62_->x[6] = 0;
        tmp62_->x[7] = 0;
        tmp62_->x[8] = 0;
        tmp62_->x[9] = 0;
        tmp62_->x[10] = tmp62;
        ul352_add(d, tmp62_, d);
        
        uint64_t tmp63 = ((uint64_t)src1->x[8]) * ((uint64_t)src2->x[2]);
        ul352 tmp63_;
        tmp63_->x[0] = 0;
        tmp63_->x[1] = 0;
        tmp63_->x[2] = 0;
        tmp63_->x[3] = 0;
        tmp63_->x[4] = 0;
        tmp63_->x[5] = 0;
        tmp63_->x[6] = 0;
        tmp63_->x[7] = 0;
        tmp63_->x[8] = 0;
        tmp63_->x[9] = 0;
        tmp63_->x[10] = tmp63;
        ul352_add(d, tmp63_, d);
        
        uint64_t tmp64 = ((uint64_t)src1->x[9]) * ((uint64_t)src2->x[1]);
        ul352 tmp64_;
        tmp64_->x[0] = 0;
        tmp64_->x[1] = 0;
        tmp64_->x[2] = 0;
        tmp64_->x[3] = 0;
        tmp64_->x[4] = 0;
        tmp64_->x[5] = 0;
        tmp64_->x[6] = 0;
        tmp64_->x[7] = 0;
        tmp64_->x[8] = 0;
        tmp64_->x[9] = 0;
        tmp64_->x[10] = tmp64;
        ul352_add(d, tmp64_, d);
        
        uint64_t tmp65 = ((uint64_t)src1->x[10]) * ((uint64_t)src2->x[0]);
        ul352 tmp65_;
        tmp65_->x[0] = 0;
        tmp65_->x[1] = 0;
        tmp65_->x[2] = 0;
        tmp65_->x[3] = 0;
        tmp65_->x[4] = 0;
        tmp65_->x[5] = 0;
        tmp65_->x[6] = 0;
        tmp65_->x[7] = 0;
        tmp65_->x[8] = 0;
        tmp65_->x[9] = 0;
        tmp65_->x[10] = tmp65;
        ul352_add(d, tmp65_, d);
        
        dst->x[0] = d->x[0];
        dst->x[1] = d->x[1];
        dst->x[2] = d->x[2];
        dst->x[3] = d->x[3];
        dst->x[4] = d->x[4];
        dst->x[5] = d->x[5];
        dst->x[6] = d->x[6];
        dst->x[7] = d->x[7];
        dst->x[8] = d->x[8];
        dst->x[9] = d->x[9];
        dst->x[10] = d->x[10];
    #endif
    return;
}




/*
 * Initialize mod352
 */
inline void mod352_init(mod352 n) {
}

/*
 * Add two ul352's modulo another
 */
inline void ul352_modadd(ul352 dst, ul352 src1, ul352 src2, mod352 n) {
    ul352_add(dst, src1, src2);
    if (ul352_cmp(dst, n->n) >= 0)
        ul352_sub(dst, dst, n->n);
}

/*
 * Subtract one ul352 from another modulo a third
 */
inline void ul352_modsub(ul352 dst, ul352 src1, ul352 src2, mod352 n) {
    ul352 tr1, tr2;
    ul352_sub(tr1, src1, src2);
    ul352_add(tr2, tr1, n->n);
    if (ul352_cmp(src1, src2) >= 0)
        ul352_set(dst, tr1);
    else
        ul352_set(dst, tr2);
}

/*
 * Mul two ul352's modulo a third, followed by Montgomery reduction
 */
void ul352_modmul(ul352 _dst, ul352 _src1, ul352 _src2, mod352 n);
void ul352_modmul(ul352 _dst, ul352 _src1, ul352 _src2, mod352 n) {
    #if defined(UL_NVIDIA)
        volatile ul352 src1;
        volatile ul352 src2;
        /* ul352_set(src1, _src1); */
        src1->x[0] = _src1->x[0];
        src1->x[1] = _src1->x[1];
        src1->x[2] = _src1->x[2];
        src1->x[3] = _src1->x[3];
        src1->x[4] = _src1->x[4];
        src1->x[5] = _src1->x[5];
        src1->x[6] = _src1->x[6];
        src1->x[7] = _src1->x[7];
        src1->x[8] = _src1->x[8];
        src1->x[9] = _src1->x[9];
        src1->x[10] = _src1->x[10];
        /* ul352_set(src2, _src2); */
        src2->x[0] = _src2->x[0];
        src2->x[1] = _src2->x[1];
        src2->x[2] = _src2->x[2];
        src2->x[3] = _src2->x[3];
        src2->x[4] = _src2->x[4];
        src2->x[5] = _src2->x[5];
        src2->x[6] = _src2->x[6];
        src2->x[7] = _src2->x[7];
        src2->x[8] = _src2->x[8];
        src2->x[9] = _src2->x[9];
        src2->x[10] = _src2->x[10];
        
        uint32_t q = 0;
        ul352 dst = {{{0}}};
        uint32_t dst_11 = 0;
        
        asm(
          /* Compute c_0..10 for the product a*b, with carry-out to dst_11 */
          "mad.lo.cc.u32  %0, %13, %24, %0;\n\t"  /* c_0 += lo(a_0, b_0) */
          "madc.hi.cc.u32 %1, %13, %24, %1;\n\t"  /* c_1 += hi(a_0, b_0) */
          "madc.lo.cc.u32 %2, %13, %26, %2;\n\t"  /* c_2 += lo(a_0, b_2) */
          "madc.hi.cc.u32 %3, %13, %26, %3;\n\t"  /* c_3 += hi(a_0, b_2) */
          "madc.lo.cc.u32 %4, %13, %28, %4;\n\t"  /* c_4 += lo(a_0, b_4) */
          "madc.hi.cc.u32 %5, %13, %28, %5;\n\t"  /* c_5 += hi(a_0, b_4) */
          "madc.lo.cc.u32 %6, %13, %30, %6;\n\t"  /* c_6 += lo(a_0, b_6) */
          "madc.hi.cc.u32 %7, %13, %30, %7;\n\t"  /* c_7 += hi(a_0, b_6) */
          "madc.lo.cc.u32 %8, %13, %32, %8;\n\t"  /* c_8 += lo(a_0, b_8) */
          "madc.hi.cc.u32 %9, %13, %32, %9;\n\t"  /* c_9 += hi(a_0, b_8) */
          "madc.lo.cc.u32 %10, %13, %34, %10;\n\t"  /* c_10 += lo(a_0, b_10) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %1, %13, %25, %1;\n\t"  /* c_1 += lo(a_0, b_1) */
          "madc.hi.cc.u32 %2, %13, %25, %2;\n\t"  /* c_2 += hi(a_0, b_1) */
          "madc.lo.cc.u32 %3, %13, %27, %3;\n\t"  /* c_3 += lo(a_0, b_3) */
          "madc.hi.cc.u32 %4, %13, %27, %4;\n\t"  /* c_4 += hi(a_0, b_3) */
          "madc.lo.cc.u32 %5, %13, %29, %5;\n\t"  /* c_5 += lo(a_0, b_5) */
          "madc.hi.cc.u32 %6, %13, %29, %6;\n\t"  /* c_6 += hi(a_0, b_5) */
          "madc.lo.cc.u32 %7, %13, %31, %7;\n\t"  /* c_7 += lo(a_0, b_7) */
          "madc.hi.cc.u32 %8, %13, %31, %8;\n\t"  /* c_8 += hi(a_0, b_7) */
          "madc.lo.cc.u32 %9, %13, %33, %9;\n\t"  /* c_9 += lo(a_0, b_9) */
          "madc.hi.cc.u32 %10, %13, %33, %10;\n\t"  /* c_10 += hi(a_0, b_9) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %1, %14, %24, %1;\n\t"  /* c_1 += lo(a_1, b_0) */
          "madc.hi.cc.u32 %2, %14, %24, %2;\n\t"  /* c_2 += hi(a_1, b_0) */
          "madc.lo.cc.u32 %3, %14, %26, %3;\n\t"  /* c_3 += lo(a_1, b_2) */
          "madc.hi.cc.u32 %4, %14, %26, %4;\n\t"  /* c_4 += hi(a_1, b_2) */
          "madc.lo.cc.u32 %5, %14, %28, %5;\n\t"  /* c_5 += lo(a_1, b_4) */
          "madc.hi.cc.u32 %6, %14, %28, %6;\n\t"  /* c_6 += hi(a_1, b_4) */
          "madc.lo.cc.u32 %7, %14, %30, %7;\n\t"  /* c_7 += lo(a_1, b_6) */
          "madc.hi.cc.u32 %8, %14, %30, %8;\n\t"  /* c_8 += hi(a_1, b_6) */
          "madc.lo.cc.u32 %9, %14, %32, %9;\n\t"  /* c_9 += lo(a_1, b_8) */
          "madc.hi.cc.u32 %10, %14, %32, %10;\n\t"  /* c_10 += hi(a_1, b_8) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %2, %14, %25, %2;\n\t"  /* c_2 += lo(a_1, b_1) */
          "madc.hi.cc.u32 %3, %14, %25, %3;\n\t"  /* c_3 += hi(a_1, b_1) */
          "madc.lo.cc.u32 %4, %14, %27, %4;\n\t"  /* c_4 += lo(a_1, b_3) */
          "madc.hi.cc.u32 %5, %14, %27, %5;\n\t"  /* c_5 += hi(a_1, b_3) */
          "madc.lo.cc.u32 %6, %14, %29, %6;\n\t"  /* c_6 += lo(a_1, b_5) */
          "madc.hi.cc.u32 %7, %14, %29, %7;\n\t"  /* c_7 += hi(a_1, b_5) */
          "madc.lo.cc.u32 %8, %14, %31, %8;\n\t"  /* c_8 += lo(a_1, b_7) */
          "madc.hi.cc.u32 %9, %14, %31, %9;\n\t"  /* c_9 += hi(a_1, b_7) */
          "madc.lo.cc.u32 %10, %14, %33, %10;\n\t"  /* c_10 += lo(a_1, b_9) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %2, %15, %24, %2;\n\t"  /* c_2 += lo(a_2, b_0) */
          "madc.hi.cc.u32 %3, %15, %24, %3;\n\t"  /* c_3 += hi(a_2, b_0) */
          "madc.lo.cc.u32 %4, %15, %26, %4;\n\t"  /* c_4 += lo(a_2, b_2) */
          "madc.hi.cc.u32 %5, %15, %26, %5;\n\t"  /* c_5 += hi(a_2, b_2) */
          "madc.lo.cc.u32 %6, %15, %28, %6;\n\t"  /* c_6 += lo(a_2, b_4) */
          "madc.hi.cc.u32 %7, %15, %28, %7;\n\t"  /* c_7 += hi(a_2, b_4) */
          "madc.lo.cc.u32 %8, %15, %30, %8;\n\t"  /* c_8 += lo(a_2, b_6) */
          "madc.hi.cc.u32 %9, %15, %30, %9;\n\t"  /* c_9 += hi(a_2, b_6) */
          "madc.lo.cc.u32 %10, %15, %32, %10;\n\t"  /* c_10 += lo(a_2, b_8) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %3, %15, %25, %3;\n\t"  /* c_3 += lo(a_2, b_1) */
          "madc.hi.cc.u32 %4, %15, %25, %4;\n\t"  /* c_4 += hi(a_2, b_1) */
          "madc.lo.cc.u32 %5, %15, %27, %5;\n\t"  /* c_5 += lo(a_2, b_3) */
          "madc.hi.cc.u32 %6, %15, %27, %6;\n\t"  /* c_6 += hi(a_2, b_3) */
          "madc.lo.cc.u32 %7, %15, %29, %7;\n\t"  /* c_7 += lo(a_2, b_5) */
          "madc.hi.cc.u32 %8, %15, %29, %8;\n\t"  /* c_8 += hi(a_2, b_5) */
          "madc.lo.cc.u32 %9, %15, %31, %9;\n\t"  /* c_9 += lo(a_2, b_7) */
          "madc.hi.cc.u32 %10, %15, %31, %10;\n\t"  /* c_10 += hi(a_2, b_7) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %3, %16, %24, %3;\n\t"  /* c_3 += lo(a_3, b_0) */
          "madc.hi.cc.u32 %4, %16, %24, %4;\n\t"  /* c_4 += hi(a_3, b_0) */
          "madc.lo.cc.u32 %5, %16, %26, %5;\n\t"  /* c_5 += lo(a_3, b_2) */
          "madc.hi.cc.u32 %6, %16, %26, %6;\n\t"  /* c_6 += hi(a_3, b_2) */
          "madc.lo.cc.u32 %7, %16, %28, %7;\n\t"  /* c_7 += lo(a_3, b_4) */
          "madc.hi.cc.u32 %8, %16, %28, %8;\n\t"  /* c_8 += hi(a_3, b_4) */
          "madc.lo.cc.u32 %9, %16, %30, %9;\n\t"  /* c_9 += lo(a_3, b_6) */
          "madc.hi.cc.u32 %10, %16, %30, %10;\n\t"  /* c_10 += hi(a_3, b_6) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %4, %16, %25, %4;\n\t"  /* c_4 += lo(a_3, b_1) */
          "madc.hi.cc.u32 %5, %16, %25, %5;\n\t"  /* c_5 += hi(a_3, b_1) */
          "madc.lo.cc.u32 %6, %16, %27, %6;\n\t"  /* c_6 += lo(a_3, b_3) */
          "madc.hi.cc.u32 %7, %16, %27, %7;\n\t"  /* c_7 += hi(a_3, b_3) */
          "madc.lo.cc.u32 %8, %16, %29, %8;\n\t"  /* c_8 += lo(a_3, b_5) */
          "madc.hi.cc.u32 %9, %16, %29, %9;\n\t"  /* c_9 += hi(a_3, b_5) */
          "madc.lo.cc.u32 %10, %16, %31, %10;\n\t"  /* c_10 += lo(a_3, b_7) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %4, %17, %24, %4;\n\t"  /* c_4 += lo(a_4, b_0) */
          "madc.hi.cc.u32 %5, %17, %24, %5;\n\t"  /* c_5 += hi(a_4, b_0) */
          "madc.lo.cc.u32 %6, %17, %26, %6;\n\t"  /* c_6 += lo(a_4, b_2) */
          "madc.hi.cc.u32 %7, %17, %26, %7;\n\t"  /* c_7 += hi(a_4, b_2) */
          "madc.lo.cc.u32 %8, %17, %28, %8;\n\t"  /* c_8 += lo(a_4, b_4) */
          "madc.hi.cc.u32 %9, %17, %28, %9;\n\t"  /* c_9 += hi(a_4, b_4) */
          "madc.lo.cc.u32 %10, %17, %30, %10;\n\t"  /* c_10 += lo(a_4, b_6) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %5, %17, %25, %5;\n\t"  /* c_5 += lo(a_4, b_1) */
          "madc.hi.cc.u32 %6, %17, %25, %6;\n\t"  /* c_6 += hi(a_4, b_1) */
          "madc.lo.cc.u32 %7, %17, %27, %7;\n\t"  /* c_7 += lo(a_4, b_3) */
          "madc.hi.cc.u32 %8, %17, %27, %8;\n\t"  /* c_8 += hi(a_4, b_3) */
          "madc.lo.cc.u32 %9, %17, %29, %9;\n\t"  /* c_9 += lo(a_4, b_5) */
          "madc.hi.cc.u32 %10, %17, %29, %10;\n\t"  /* c_10 += hi(a_4, b_5) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %5, %18, %24, %5;\n\t"  /* c_5 += lo(a_5, b_0) */
          "madc.hi.cc.u32 %6, %18, %24, %6;\n\t"  /* c_6 += hi(a_5, b_0) */
          "madc.lo.cc.u32 %7, %18, %26, %7;\n\t"  /* c_7 += lo(a_5, b_2) */
          "madc.hi.cc.u32 %8, %18, %26, %8;\n\t"  /* c_8 += hi(a_5, b_2) */
          "madc.lo.cc.u32 %9, %18, %28, %9;\n\t"  /* c_9 += lo(a_5, b_4) */
          "madc.hi.cc.u32 %10, %18, %28, %10;\n\t"  /* c_10 += hi(a_5, b_4) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %6, %18, %25, %6;\n\t"  /* c_6 += lo(a_5, b_1) */
          "madc.hi.cc.u32 %7, %18, %25, %7;\n\t"  /* c_7 += hi(a_5, b_1) */
          "madc.lo.cc.u32 %8, %18, %27, %8;\n\t"  /* c_8 += lo(a_5, b_3) */
          "madc.hi.cc.u32 %9, %18, %27, %9;\n\t"  /* c_9 += hi(a_5, b_3) */
          "madc.lo.cc.u32 %10, %18, %29, %10;\n\t"  /* c_10 += lo(a_5, b_5) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %6, %19, %24, %6;\n\t"  /* c_6 += lo(a_6, b_0) */
          "madc.hi.cc.u32 %7, %19, %24, %7;\n\t"  /* c_7 += hi(a_6, b_0) */
          "madc.lo.cc.u32 %8, %19, %26, %8;\n\t"  /* c_8 += lo(a_6, b_2) */
          "madc.hi.cc.u32 %9, %19, %26, %9;\n\t"  /* c_9 += hi(a_6, b_2) */
          "madc.lo.cc.u32 %10, %19, %28, %10;\n\t"  /* c_10 += lo(a_6, b_4) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %7, %19, %25, %7;\n\t"  /* c_7 += lo(a_6, b_1) */
          "madc.hi.cc.u32 %8, %19, %25, %8;\n\t"  /* c_8 += hi(a_6, b_1) */
          "madc.lo.cc.u32 %9, %19, %27, %9;\n\t"  /* c_9 += lo(a_6, b_3) */
          "madc.hi.cc.u32 %10, %19, %27, %10;\n\t"  /* c_10 += hi(a_6, b_3) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %7, %20, %24, %7;\n\t"  /* c_7 += lo(a_7, b_0) */
          "madc.hi.cc.u32 %8, %20, %24, %8;\n\t"  /* c_8 += hi(a_7, b_0) */
          "madc.lo.cc.u32 %9, %20, %26, %9;\n\t"  /* c_9 += lo(a_7, b_2) */
          "madc.hi.cc.u32 %10, %20, %26, %10;\n\t"  /* c_10 += hi(a_7, b_2) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %8, %20, %25, %8;\n\t"  /* c_8 += lo(a_7, b_1) */
          "madc.hi.cc.u32 %9, %20, %25, %9;\n\t"  /* c_9 += hi(a_7, b_1) */
          "madc.lo.cc.u32 %10, %20, %27, %10;\n\t"  /* c_10 += lo(a_7, b_3) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %8, %21, %24, %8;\n\t"  /* c_8 += lo(a_8, b_0) */
          "madc.hi.cc.u32 %9, %21, %24, %9;\n\t"  /* c_9 += hi(a_8, b_0) */
          "madc.lo.cc.u32 %10, %21, %26, %10;\n\t"  /* c_10 += lo(a_8, b_2) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %9, %21, %25, %9;\n\t"  /* c_9 += lo(a_8, b_1) */
          "madc.hi.cc.u32 %10, %21, %25, %10;\n\t"  /* c_10 += hi(a_8, b_1) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %9, %22, %24, %9;\n\t"  /* c_9 += lo(a_9, b_0) */
          "madc.hi.cc.u32 %10, %22, %24, %10;\n\t"  /* c_10 += hi(a_9, b_0) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %10, %22, %25, %10;\n\t"  /* c_10 += lo(a_9, b_1) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          "mad.lo.cc.u32  %10, %23, %24, %10;\n\t"  /* c_10 += lo(a_10, b_0) */
          "addc.u32 %11, %11, 0;\n\t"  /* accum carry in c_11 */
          
          /* Add in the qN's */
          /* n = 0... */
            /* Compute q = mu * c_0 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_0 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_0 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_1 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_2 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_3 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_4 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_5 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_6 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_7 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_8 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_9 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_10 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_11 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_12 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_1 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_2 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_3 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_4 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_5 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_6 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_7 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_8 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_9 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_10 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_11 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 1... */
            /* Compute q = mu * c_1 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_1 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_1 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_2 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_3 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_4 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_5 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_6 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_7 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_8 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_9 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_10 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_11 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_12 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_13 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_2 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_3 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_4 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_5 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_6 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_7 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_8 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_9 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_10 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_11 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_12 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 2... */
            /* Compute q = mu * c_2 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_2 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_2 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_3 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_4 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_5 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_6 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_7 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_8 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_9 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_10 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_11 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_12 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_13 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_14 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_3 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_4 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_5 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_6 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_7 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_8 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_9 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_10 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_11 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_12 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_13 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 3... */
            /* Compute q = mu * c_3 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_3 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_3 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_4 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_5 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_6 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_7 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_8 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_9 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_10 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_11 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_12 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_13 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_14 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_15 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_4 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_5 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_6 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_7 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_8 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_9 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_10 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_11 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_12 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_13 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_14 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 4... */
            /* Compute q = mu * c_4 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_4 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_4 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_5 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_6 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_7 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_8 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_9 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_10 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_11 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_12 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_13 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_14 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_15 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_16 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_5 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_6 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_7 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_8 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_9 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_10 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_11 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_12 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_13 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_14 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_15 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 5... */
            /* Compute q = mu * c_5 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_5 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_5 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_6 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_7 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_8 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_9 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_10 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_11 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_12 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_13 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_14 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_15 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_16 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_17 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_6 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_7 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_8 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_9 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_10 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_11 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_12 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_13 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_14 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_15 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_16 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 6... */
            /* Compute q = mu * c_6 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_6 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_6 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_7 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_8 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_9 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_10 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_11 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_12 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_13 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_14 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_15 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_16 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_17 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_18 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_7 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_8 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_9 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_10 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_11 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_12 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_13 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_14 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_15 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_16 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_17 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 7... */
            /* Compute q = mu * c_7 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_7 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_7 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_8 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_9 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_10 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_11 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_12 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_13 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_14 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_15 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_16 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_17 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_18 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_19 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_8 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_9 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_10 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_11 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_12 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_13 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_14 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_15 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_16 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_17 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_18 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 8... */
            /* Compute q = mu * c_8 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_8 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_8 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_9 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_10 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_11 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_12 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_13 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_14 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_15 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_16 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_17 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_18 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_19 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_20 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_9 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_10 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_11 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_12 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_13 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_14 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_15 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_16 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_17 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_18 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_19 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 9... */
            /* Compute q = mu * c_9 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_9 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_9 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_10 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_11 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_12 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_13 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_14 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_15 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_16 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_17 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_18 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_19 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_20 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_21 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_10 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_11 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_12 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_13 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_14 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_15 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_16 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_17 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_18 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_19 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_20 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          /* n = 10... */
            /* Compute q = mu * c_10 */
            "mov.u32 %12, %0;\n\t"
            "mul.lo.u32 %12, %12, %46;\n\t"
            /* Update c_10 with qN_0 */
            "mad.lo.cc.u32 %0, %12, %35, %0;\n\t"  /* c_10 += lo(q, n_0) */
            /* Shift */
            "mov.u32 %0, %1;\n\t"  /* dst_0 <- c_11 */
            "mov.u32 %1, %2;\n\t"  /* dst_1 <- c_12 */
            "mov.u32 %2, %3;\n\t"  /* dst_2 <- c_13 */
            "mov.u32 %3, %4;\n\t"  /* dst_3 <- c_14 */
            "mov.u32 %4, %5;\n\t"  /* dst_4 <- c_15 */
            "mov.u32 %5, %6;\n\t"  /* dst_5 <- c_16 */
            "mov.u32 %6, %7;\n\t"  /* dst_6 <- c_17 */
            "mov.u32 %7, %8;\n\t"  /* dst_7 <- c_18 */
            "mov.u32 %8, %9;\n\t"  /* dst_8 <- c_19 */
            "mov.u32 %9, %10;\n\t"  /* dst_9 <- c_20 */
            "mov.u32 %10, %11;\n\t"  /* dst_10 <- c_21 */
            "xor.b32 %11, %11, %11;\n\t"  /* dst_11 <- c_22 */
            /* Compute and add-in qN, with carry-out to dst_11 */
            "madc.hi.cc.u32 %0, %12, %35, %0;\n\t"  /* c_11 += hi(q, n_0) */
            "madc.lo.cc.u32 %1, %12, %37, %1;\n\t"  /* c_12 += lo(q, n_2) */
            "madc.hi.cc.u32 %2, %12, %37, %2;\n\t"  /* c_13 += hi(q, n_2) */
            "madc.lo.cc.u32 %3, %12, %39, %3;\n\t"  /* c_14 += lo(q, n_4) */
            "madc.hi.cc.u32 %4, %12, %39, %4;\n\t"  /* c_15 += hi(q, n_4) */
            "madc.lo.cc.u32 %5, %12, %41, %5;\n\t"  /* c_16 += lo(q, n_6) */
            "madc.hi.cc.u32 %6, %12, %41, %6;\n\t"  /* c_17 += hi(q, n_6) */
            "madc.lo.cc.u32 %7, %12, %43, %7;\n\t"  /* c_18 += lo(q, n_8) */
            "madc.hi.cc.u32 %8, %12, %43, %8;\n\t"  /* c_19 += hi(q, n_8) */
            "madc.lo.cc.u32 %9, %12, %45, %9;\n\t"  /* c_20 += lo(q, n_10) */
            "madc.hi.cc.u32 %10, %12, %45, %10;\n\t"  /* c_21 += hi(q, n_10) */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
            "mad.lo.cc.u32  %0, %12, %36, %0;\n\t"  /* c_1 += lo(q, n_1) */
            "madc.hi.cc.u32 %1, %12, %36, %1;\n\t"  /* c_2 += hi(q, n_1) */
            "madc.lo.cc.u32 %2, %12, %38, %2;\n\t"  /* c_3 += lo(q, n_3) */
            "madc.hi.cc.u32 %3, %12, %38, %3;\n\t"  /* c_4 += hi(q, n_3) */
            "madc.lo.cc.u32 %4, %12, %40, %4;\n\t"  /* c_5 += lo(q, n_5) */
            "madc.hi.cc.u32 %5, %12, %40, %5;\n\t"  /* c_6 += hi(q, n_5) */
            "madc.lo.cc.u32 %6, %12, %42, %6;\n\t"  /* c_7 += lo(q, n_7) */
            "madc.hi.cc.u32 %7, %12, %42, %7;\n\t"  /* c_8 += hi(q, n_7) */
            "madc.lo.cc.u32 %8, %12, %44, %8;\n\t"  /* c_9 += lo(q, n_9) */
            "madc.hi.cc.u32 %9, %12, %44, %9;\n\t"  /* c_10 += hi(q, n_9) */
            "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in dst_10 */
            "addc.u32    %11, %11, 0;\n\t"  /* accum carry in dst_11 */
          
          /* Compute c_11..21 in the product a*b, storing the result in dst_0..10, with carry-out to dst_11 */
          "mad.hi.cc.u32  %0, %13, %34, %0;\n\t"  /* c_11 += hi(a_0, b_10) */
          "addc.cc.u32 %1, %1, 0;\n\t"  /* accum carry in c_12 */
          "addc.cc.u32 %2, %2, 0;\n\t"  /* accum carry in c_13 */
          "addc.cc.u32 %3, %3, 0;\n\t"  /* accum carry in c_14 */
          "addc.cc.u32 %4, %4, 0;\n\t"  /* accum carry in c_15 */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %14, %34, %0;\n\t"  /* c_11 += lo(a_1, b_10) */
          "madc.hi.cc.u32 %1, %14, %34, %1;\n\t"  /* c_12 += hi(a_1, b_10) */
          "addc.cc.u32 %2, %2, 0;\n\t"  /* accum carry in c_13 */
          "addc.cc.u32 %3, %3, 0;\n\t"  /* accum carry in c_14 */
          "addc.cc.u32 %4, %4, 0;\n\t"  /* accum carry in c_15 */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %14, %33, %0;\n\t"  /* c_11 += hi(a_1, b_9) */
          "addc.cc.u32 %1, %1, 0;\n\t"  /* accum carry in c_12 */
          "addc.cc.u32 %2, %2, 0;\n\t"  /* accum carry in c_13 */
          "addc.cc.u32 %3, %3, 0;\n\t"  /* accum carry in c_14 */
          "addc.cc.u32 %4, %4, 0;\n\t"  /* accum carry in c_15 */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %15, %32, %0;\n\t"  /* c_11 += hi(a_2, b_8) */
          "madc.lo.cc.u32 %1, %15, %34, %1;\n\t"  /* c_12 += lo(a_2, b_10) */
          "madc.hi.cc.u32 %2, %15, %34, %2;\n\t"  /* c_13 += hi(a_2, b_10) */
          "addc.cc.u32 %3, %3, 0;\n\t"  /* accum carry in c_14 */
          "addc.cc.u32 %4, %4, 0;\n\t"  /* accum carry in c_15 */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %15, %33, %0;\n\t"  /* c_11 += lo(a_2, b_9) */
          "madc.hi.cc.u32 %1, %15, %33, %1;\n\t"  /* c_12 += hi(a_2, b_9) */
          "addc.cc.u32 %2, %2, 0;\n\t"  /* accum carry in c_13 */
          "addc.cc.u32 %3, %3, 0;\n\t"  /* accum carry in c_14 */
          "addc.cc.u32 %4, %4, 0;\n\t"  /* accum carry in c_15 */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %16, %32, %0;\n\t"  /* c_11 += lo(a_3, b_8) */
          "madc.hi.cc.u32 %1, %16, %32, %1;\n\t"  /* c_12 += hi(a_3, b_8) */
          "madc.lo.cc.u32 %2, %16, %34, %2;\n\t"  /* c_13 += lo(a_3, b_10) */
          "madc.hi.cc.u32 %3, %16, %34, %3;\n\t"  /* c_14 += hi(a_3, b_10) */
          "addc.cc.u32 %4, %4, 0;\n\t"  /* accum carry in c_15 */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %16, %31, %0;\n\t"  /* c_11 += hi(a_3, b_7) */
          "madc.lo.cc.u32 %1, %16, %33, %1;\n\t"  /* c_12 += lo(a_3, b_9) */
          "madc.hi.cc.u32 %2, %16, %33, %2;\n\t"  /* c_13 += hi(a_3, b_9) */
          "addc.cc.u32 %3, %3, 0;\n\t"  /* accum carry in c_14 */
          "addc.cc.u32 %4, %4, 0;\n\t"  /* accum carry in c_15 */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %17, %30, %0;\n\t"  /* c_11 += hi(a_4, b_6) */
          "madc.lo.cc.u32 %1, %17, %32, %1;\n\t"  /* c_12 += lo(a_4, b_8) */
          "madc.hi.cc.u32 %2, %17, %32, %2;\n\t"  /* c_13 += hi(a_4, b_8) */
          "madc.lo.cc.u32 %3, %17, %34, %3;\n\t"  /* c_14 += lo(a_4, b_10) */
          "madc.hi.cc.u32 %4, %17, %34, %4;\n\t"  /* c_15 += hi(a_4, b_10) */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %17, %31, %0;\n\t"  /* c_11 += lo(a_4, b_7) */
          "madc.hi.cc.u32 %1, %17, %31, %1;\n\t"  /* c_12 += hi(a_4, b_7) */
          "madc.lo.cc.u32 %2, %17, %33, %2;\n\t"  /* c_13 += lo(a_4, b_9) */
          "madc.hi.cc.u32 %3, %17, %33, %3;\n\t"  /* c_14 += hi(a_4, b_9) */
          "addc.cc.u32 %4, %4, 0;\n\t"  /* accum carry in c_15 */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %18, %30, %0;\n\t"  /* c_11 += lo(a_5, b_6) */
          "madc.hi.cc.u32 %1, %18, %30, %1;\n\t"  /* c_12 += hi(a_5, b_6) */
          "madc.lo.cc.u32 %2, %18, %32, %2;\n\t"  /* c_13 += lo(a_5, b_8) */
          "madc.hi.cc.u32 %3, %18, %32, %3;\n\t"  /* c_14 += hi(a_5, b_8) */
          "madc.lo.cc.u32 %4, %18, %34, %4;\n\t"  /* c_15 += lo(a_5, b_10) */
          "madc.hi.cc.u32 %5, %18, %34, %5;\n\t"  /* c_16 += hi(a_5, b_10) */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %18, %29, %0;\n\t"  /* c_11 += hi(a_5, b_5) */
          "madc.lo.cc.u32 %1, %18, %31, %1;\n\t"  /* c_12 += lo(a_5, b_7) */
          "madc.hi.cc.u32 %2, %18, %31, %2;\n\t"  /* c_13 += hi(a_5, b_7) */
          "madc.lo.cc.u32 %3, %18, %33, %3;\n\t"  /* c_14 += lo(a_5, b_9) */
          "madc.hi.cc.u32 %4, %18, %33, %4;\n\t"  /* c_15 += hi(a_5, b_9) */
          "addc.cc.u32 %5, %5, 0;\n\t"  /* accum carry in c_16 */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %19, %28, %0;\n\t"  /* c_11 += hi(a_6, b_4) */
          "madc.lo.cc.u32 %1, %19, %30, %1;\n\t"  /* c_12 += lo(a_6, b_6) */
          "madc.hi.cc.u32 %2, %19, %30, %2;\n\t"  /* c_13 += hi(a_6, b_6) */
          "madc.lo.cc.u32 %3, %19, %32, %3;\n\t"  /* c_14 += lo(a_6, b_8) */
          "madc.hi.cc.u32 %4, %19, %32, %4;\n\t"  /* c_15 += hi(a_6, b_8) */
          "madc.lo.cc.u32 %5, %19, %34, %5;\n\t"  /* c_16 += lo(a_6, b_10) */
          "madc.hi.cc.u32 %6, %19, %34, %6;\n\t"  /* c_17 += hi(a_6, b_10) */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %19, %29, %0;\n\t"  /* c_11 += lo(a_6, b_5) */
          "madc.hi.cc.u32 %1, %19, %29, %1;\n\t"  /* c_12 += hi(a_6, b_5) */
          "madc.lo.cc.u32 %2, %19, %31, %2;\n\t"  /* c_13 += lo(a_6, b_7) */
          "madc.hi.cc.u32 %3, %19, %31, %3;\n\t"  /* c_14 += hi(a_6, b_7) */
          "madc.lo.cc.u32 %4, %19, %33, %4;\n\t"  /* c_15 += lo(a_6, b_9) */
          "madc.hi.cc.u32 %5, %19, %33, %5;\n\t"  /* c_16 += hi(a_6, b_9) */
          "addc.cc.u32 %6, %6, 0;\n\t"  /* accum carry in c_17 */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %20, %28, %0;\n\t"  /* c_11 += lo(a_7, b_4) */
          "madc.hi.cc.u32 %1, %20, %28, %1;\n\t"  /* c_12 += hi(a_7, b_4) */
          "madc.lo.cc.u32 %2, %20, %30, %2;\n\t"  /* c_13 += lo(a_7, b_6) */
          "madc.hi.cc.u32 %3, %20, %30, %3;\n\t"  /* c_14 += hi(a_7, b_6) */
          "madc.lo.cc.u32 %4, %20, %32, %4;\n\t"  /* c_15 += lo(a_7, b_8) */
          "madc.hi.cc.u32 %5, %20, %32, %5;\n\t"  /* c_16 += hi(a_7, b_8) */
          "madc.lo.cc.u32 %6, %20, %34, %6;\n\t"  /* c_17 += lo(a_7, b_10) */
          "madc.hi.cc.u32 %7, %20, %34, %7;\n\t"  /* c_18 += hi(a_7, b_10) */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %20, %27, %0;\n\t"  /* c_11 += hi(a_7, b_3) */
          "madc.lo.cc.u32 %1, %20, %29, %1;\n\t"  /* c_12 += lo(a_7, b_5) */
          "madc.hi.cc.u32 %2, %20, %29, %2;\n\t"  /* c_13 += hi(a_7, b_5) */
          "madc.lo.cc.u32 %3, %20, %31, %3;\n\t"  /* c_14 += lo(a_7, b_7) */
          "madc.hi.cc.u32 %4, %20, %31, %4;\n\t"  /* c_15 += hi(a_7, b_7) */
          "madc.lo.cc.u32 %5, %20, %33, %5;\n\t"  /* c_16 += lo(a_7, b_9) */
          "madc.hi.cc.u32 %6, %20, %33, %6;\n\t"  /* c_17 += hi(a_7, b_9) */
          "addc.cc.u32 %7, %7, 0;\n\t"  /* accum carry in c_18 */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %21, %26, %0;\n\t"  /* c_11 += hi(a_8, b_2) */
          "madc.lo.cc.u32 %1, %21, %28, %1;\n\t"  /* c_12 += lo(a_8, b_4) */
          "madc.hi.cc.u32 %2, %21, %28, %2;\n\t"  /* c_13 += hi(a_8, b_4) */
          "madc.lo.cc.u32 %3, %21, %30, %3;\n\t"  /* c_14 += lo(a_8, b_6) */
          "madc.hi.cc.u32 %4, %21, %30, %4;\n\t"  /* c_15 += hi(a_8, b_6) */
          "madc.lo.cc.u32 %5, %21, %32, %5;\n\t"  /* c_16 += lo(a_8, b_8) */
          "madc.hi.cc.u32 %6, %21, %32, %6;\n\t"  /* c_17 += hi(a_8, b_8) */
          "madc.lo.cc.u32 %7, %21, %34, %7;\n\t"  /* c_18 += lo(a_8, b_10) */
          "madc.hi.cc.u32 %8, %21, %34, %8;\n\t"  /* c_19 += hi(a_8, b_10) */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %21, %27, %0;\n\t"  /* c_11 += lo(a_8, b_3) */
          "madc.hi.cc.u32 %1, %21, %27, %1;\n\t"  /* c_12 += hi(a_8, b_3) */
          "madc.lo.cc.u32 %2, %21, %29, %2;\n\t"  /* c_13 += lo(a_8, b_5) */
          "madc.hi.cc.u32 %3, %21, %29, %3;\n\t"  /* c_14 += hi(a_8, b_5) */
          "madc.lo.cc.u32 %4, %21, %31, %4;\n\t"  /* c_15 += lo(a_8, b_7) */
          "madc.hi.cc.u32 %5, %21, %31, %5;\n\t"  /* c_16 += hi(a_8, b_7) */
          "madc.lo.cc.u32 %6, %21, %33, %6;\n\t"  /* c_17 += lo(a_8, b_9) */
          "madc.hi.cc.u32 %7, %21, %33, %7;\n\t"  /* c_18 += hi(a_8, b_9) */
          "addc.cc.u32 %8, %8, 0;\n\t"  /* accum carry in c_19 */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %22, %26, %0;\n\t"  /* c_11 += lo(a_9, b_2) */
          "madc.hi.cc.u32 %1, %22, %26, %1;\n\t"  /* c_12 += hi(a_9, b_2) */
          "madc.lo.cc.u32 %2, %22, %28, %2;\n\t"  /* c_13 += lo(a_9, b_4) */
          "madc.hi.cc.u32 %3, %22, %28, %3;\n\t"  /* c_14 += hi(a_9, b_4) */
          "madc.lo.cc.u32 %4, %22, %30, %4;\n\t"  /* c_15 += lo(a_9, b_6) */
          "madc.hi.cc.u32 %5, %22, %30, %5;\n\t"  /* c_16 += hi(a_9, b_6) */
          "madc.lo.cc.u32 %6, %22, %32, %6;\n\t"  /* c_17 += lo(a_9, b_8) */
          "madc.hi.cc.u32 %7, %22, %32, %7;\n\t"  /* c_18 += hi(a_9, b_8) */
          "madc.lo.cc.u32 %8, %22, %34, %8;\n\t"  /* c_19 += lo(a_9, b_10) */
          "madc.hi.cc.u32 %9, %22, %34, %9;\n\t"  /* c_20 += hi(a_9, b_10) */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %22, %25, %0;\n\t"  /* c_11 += hi(a_9, b_1) */
          "madc.lo.cc.u32 %1, %22, %27, %1;\n\t"  /* c_12 += lo(a_9, b_3) */
          "madc.hi.cc.u32 %2, %22, %27, %2;\n\t"  /* c_13 += hi(a_9, b_3) */
          "madc.lo.cc.u32 %3, %22, %29, %3;\n\t"  /* c_14 += lo(a_9, b_5) */
          "madc.hi.cc.u32 %4, %22, %29, %4;\n\t"  /* c_15 += hi(a_9, b_5) */
          "madc.lo.cc.u32 %5, %22, %31, %5;\n\t"  /* c_16 += lo(a_9, b_7) */
          "madc.hi.cc.u32 %6, %22, %31, %6;\n\t"  /* c_17 += hi(a_9, b_7) */
          "madc.lo.cc.u32 %7, %22, %33, %7;\n\t"  /* c_18 += lo(a_9, b_9) */
          "madc.hi.cc.u32 %8, %22, %33, %8;\n\t"  /* c_19 += hi(a_9, b_9) */
          "addc.cc.u32 %9, %9, 0;\n\t"  /* accum carry in c_20 */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.hi.cc.u32  %0, %23, %24, %0;\n\t"  /* c_11 += hi(a_10, b_0) */
          "madc.lo.cc.u32 %1, %23, %26, %1;\n\t"  /* c_12 += lo(a_10, b_2) */
          "madc.hi.cc.u32 %2, %23, %26, %2;\n\t"  /* c_13 += hi(a_10, b_2) */
          "madc.lo.cc.u32 %3, %23, %28, %3;\n\t"  /* c_14 += lo(a_10, b_4) */
          "madc.hi.cc.u32 %4, %23, %28, %4;\n\t"  /* c_15 += hi(a_10, b_4) */
          "madc.lo.cc.u32 %5, %23, %30, %5;\n\t"  /* c_16 += lo(a_10, b_6) */
          "madc.hi.cc.u32 %6, %23, %30, %6;\n\t"  /* c_17 += hi(a_10, b_6) */
          "madc.lo.cc.u32 %7, %23, %32, %7;\n\t"  /* c_18 += lo(a_10, b_8) */
          "madc.hi.cc.u32 %8, %23, %32, %8;\n\t"  /* c_19 += hi(a_10, b_8) */
          "madc.lo.cc.u32 %9, %23, %34, %9;\n\t"  /* c_20 += lo(a_10, b_10) */
          "madc.hi.cc.u32 %10, %23, %34, %10;\n\t"  /* c_21 += hi(a_10, b_10) */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          "mad.lo.cc.u32  %0, %23, %25, %0;\n\t"  /* c_11 += lo(a_10, b_1) */
          "madc.hi.cc.u32 %1, %23, %25, %1;\n\t"  /* c_12 += hi(a_10, b_1) */
          "madc.lo.cc.u32 %2, %23, %27, %2;\n\t"  /* c_13 += lo(a_10, b_3) */
          "madc.hi.cc.u32 %3, %23, %27, %3;\n\t"  /* c_14 += hi(a_10, b_3) */
          "madc.lo.cc.u32 %4, %23, %29, %4;\n\t"  /* c_15 += lo(a_10, b_5) */
          "madc.hi.cc.u32 %5, %23, %29, %5;\n\t"  /* c_16 += hi(a_10, b_5) */
          "madc.lo.cc.u32 %6, %23, %31, %6;\n\t"  /* c_17 += lo(a_10, b_7) */
          "madc.hi.cc.u32 %7, %23, %31, %7;\n\t"  /* c_18 += hi(a_10, b_7) */
          "madc.lo.cc.u32 %8, %23, %33, %8;\n\t"  /* c_19 += lo(a_10, b_9) */
          "madc.hi.cc.u32 %9, %23, %33, %9;\n\t"  /* c_20 += hi(a_10, b_9) */
          "addc.cc.u32 %10, %10, 0;\n\t"  /* accum carry in c_21 */
          "addc.u32    %11, %11, 0;\n\t"  /* accum carry in c_22 */
          
          : "+r" (dst->x[0]), "+r" (dst->x[1]), "+r" (dst->x[2]), "+r" (dst->x[3]), "+r" (dst->x[4]), "+r" (dst->x[5]), "+r" (dst->x[6]), "+r" (dst->x[7]), "+r" (dst->x[8]), "+r" (dst->x[9]), "+r" (dst->x[10]), "+r" (dst_11), "+r" (q)
          : "r" (src1->x[0]), "r" (src1->x[1]), "r" (src1->x[2]), "r" (src1->x[3]), "r" (src1->x[4]), "r" (src1->x[5]), "r" (src1->x[6]), "r" (src1->x[7]), "r" (src1->x[8]), "r" (src1->x[9]), "r" (src1->x[10]), 
            "r" (src2->x[0]), "r" (src2->x[1]), "r" (src2->x[2]), "r" (src2->x[3]), "r" (src2->x[4]), "r" (src2->x[5]), "r" (src2->x[6]), "r" (src2->x[7]), "r" (src2->x[8]), "r" (src2->x[9]), "r" (src2->x[10]), 
            "r" (n->n->x[0]), "r" (n->n->x[1]), "r" (n->n->x[2]), "r" (n->n->x[3]), "r" (n->n->x[4]), "r" (n->n->x[5]), "r" (n->n->x[6]), "r" (n->n->x[7]), "r" (n->n->x[8]), "r" (n->n->x[9]), "r" (n->n->x[10]), 
            "r" (n->np)
        );
        
        /* Reduce as needed */
        if (dst_11 || (ul352_cmp(dst, n->n) >= 0))
            ul352_sub(dst, dst, n->n);
        ul352_set(_dst, dst);
    #else
        /* The pairwise products of the a_i and b_j */
        const uint64_t a_0__b_0 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_0__b_0_lo = a_0__b_0;
        const uint32_t a_0__b_0_hi = a_0__b_0 >> 32;
        const uint64_t a_0__b_1 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_0__b_1_lo = a_0__b_1;
        const uint32_t a_0__b_1_hi = a_0__b_1 >> 32;
        const uint64_t a_0__b_2 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_0__b_2_lo = a_0__b_2;
        const uint32_t a_0__b_2_hi = a_0__b_2 >> 32;
        const uint64_t a_0__b_3 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_0__b_3_lo = a_0__b_3;
        const uint32_t a_0__b_3_hi = a_0__b_3 >> 32;
        const uint64_t a_0__b_4 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_0__b_4_lo = a_0__b_4;
        const uint32_t a_0__b_4_hi = a_0__b_4 >> 32;
        const uint64_t a_0__b_5 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_0__b_5_lo = a_0__b_5;
        const uint32_t a_0__b_5_hi = a_0__b_5 >> 32;
        const uint64_t a_0__b_6 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_0__b_6_lo = a_0__b_6;
        const uint32_t a_0__b_6_hi = a_0__b_6 >> 32;
        const uint64_t a_0__b_7 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_0__b_7_lo = a_0__b_7;
        const uint32_t a_0__b_7_hi = a_0__b_7 >> 32;
        const uint64_t a_0__b_8 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_0__b_8_lo = a_0__b_8;
        const uint32_t a_0__b_8_hi = a_0__b_8 >> 32;
        const uint64_t a_0__b_9 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_0__b_9_lo = a_0__b_9;
        const uint32_t a_0__b_9_hi = a_0__b_9 >> 32;
        const uint64_t a_0__b_10 = ((uint64_t)_src1->x[0]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_0__b_10_lo = a_0__b_10;
        const uint32_t a_0__b_10_hi = a_0__b_10 >> 32;
        const uint64_t a_1__b_0 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_1__b_0_lo = a_1__b_0;
        const uint32_t a_1__b_0_hi = a_1__b_0 >> 32;
        const uint64_t a_1__b_1 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_1__b_1_lo = a_1__b_1;
        const uint32_t a_1__b_1_hi = a_1__b_1 >> 32;
        const uint64_t a_1__b_2 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_1__b_2_lo = a_1__b_2;
        const uint32_t a_1__b_2_hi = a_1__b_2 >> 32;
        const uint64_t a_1__b_3 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_1__b_3_lo = a_1__b_3;
        const uint32_t a_1__b_3_hi = a_1__b_3 >> 32;
        const uint64_t a_1__b_4 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_1__b_4_lo = a_1__b_4;
        const uint32_t a_1__b_4_hi = a_1__b_4 >> 32;
        const uint64_t a_1__b_5 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_1__b_5_lo = a_1__b_5;
        const uint32_t a_1__b_5_hi = a_1__b_5 >> 32;
        const uint64_t a_1__b_6 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_1__b_6_lo = a_1__b_6;
        const uint32_t a_1__b_6_hi = a_1__b_6 >> 32;
        const uint64_t a_1__b_7 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_1__b_7_lo = a_1__b_7;
        const uint32_t a_1__b_7_hi = a_1__b_7 >> 32;
        const uint64_t a_1__b_8 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_1__b_8_lo = a_1__b_8;
        const uint32_t a_1__b_8_hi = a_1__b_8 >> 32;
        const uint64_t a_1__b_9 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_1__b_9_lo = a_1__b_9;
        const uint32_t a_1__b_9_hi = a_1__b_9 >> 32;
        const uint64_t a_1__b_10 = ((uint64_t)_src1->x[1]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_1__b_10_lo = a_1__b_10;
        const uint32_t a_1__b_10_hi = a_1__b_10 >> 32;
        const uint64_t a_2__b_0 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_2__b_0_lo = a_2__b_0;
        const uint32_t a_2__b_0_hi = a_2__b_0 >> 32;
        const uint64_t a_2__b_1 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_2__b_1_lo = a_2__b_1;
        const uint32_t a_2__b_1_hi = a_2__b_1 >> 32;
        const uint64_t a_2__b_2 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_2__b_2_lo = a_2__b_2;
        const uint32_t a_2__b_2_hi = a_2__b_2 >> 32;
        const uint64_t a_2__b_3 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_2__b_3_lo = a_2__b_3;
        const uint32_t a_2__b_3_hi = a_2__b_3 >> 32;
        const uint64_t a_2__b_4 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_2__b_4_lo = a_2__b_4;
        const uint32_t a_2__b_4_hi = a_2__b_4 >> 32;
        const uint64_t a_2__b_5 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_2__b_5_lo = a_2__b_5;
        const uint32_t a_2__b_5_hi = a_2__b_5 >> 32;
        const uint64_t a_2__b_6 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_2__b_6_lo = a_2__b_6;
        const uint32_t a_2__b_6_hi = a_2__b_6 >> 32;
        const uint64_t a_2__b_7 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_2__b_7_lo = a_2__b_7;
        const uint32_t a_2__b_7_hi = a_2__b_7 >> 32;
        const uint64_t a_2__b_8 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_2__b_8_lo = a_2__b_8;
        const uint32_t a_2__b_8_hi = a_2__b_8 >> 32;
        const uint64_t a_2__b_9 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_2__b_9_lo = a_2__b_9;
        const uint32_t a_2__b_9_hi = a_2__b_9 >> 32;
        const uint64_t a_2__b_10 = ((uint64_t)_src1->x[2]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_2__b_10_lo = a_2__b_10;
        const uint32_t a_2__b_10_hi = a_2__b_10 >> 32;
        const uint64_t a_3__b_0 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_3__b_0_lo = a_3__b_0;
        const uint32_t a_3__b_0_hi = a_3__b_0 >> 32;
        const uint64_t a_3__b_1 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_3__b_1_lo = a_3__b_1;
        const uint32_t a_3__b_1_hi = a_3__b_1 >> 32;
        const uint64_t a_3__b_2 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_3__b_2_lo = a_3__b_2;
        const uint32_t a_3__b_2_hi = a_3__b_2 >> 32;
        const uint64_t a_3__b_3 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_3__b_3_lo = a_3__b_3;
        const uint32_t a_3__b_3_hi = a_3__b_3 >> 32;
        const uint64_t a_3__b_4 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_3__b_4_lo = a_3__b_4;
        const uint32_t a_3__b_4_hi = a_3__b_4 >> 32;
        const uint64_t a_3__b_5 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_3__b_5_lo = a_3__b_5;
        const uint32_t a_3__b_5_hi = a_3__b_5 >> 32;
        const uint64_t a_3__b_6 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_3__b_6_lo = a_3__b_6;
        const uint32_t a_3__b_6_hi = a_3__b_6 >> 32;
        const uint64_t a_3__b_7 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_3__b_7_lo = a_3__b_7;
        const uint32_t a_3__b_7_hi = a_3__b_7 >> 32;
        const uint64_t a_3__b_8 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_3__b_8_lo = a_3__b_8;
        const uint32_t a_3__b_8_hi = a_3__b_8 >> 32;
        const uint64_t a_3__b_9 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_3__b_9_lo = a_3__b_9;
        const uint32_t a_3__b_9_hi = a_3__b_9 >> 32;
        const uint64_t a_3__b_10 = ((uint64_t)_src1->x[3]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_3__b_10_lo = a_3__b_10;
        const uint32_t a_3__b_10_hi = a_3__b_10 >> 32;
        const uint64_t a_4__b_0 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_4__b_0_lo = a_4__b_0;
        const uint32_t a_4__b_0_hi = a_4__b_0 >> 32;
        const uint64_t a_4__b_1 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_4__b_1_lo = a_4__b_1;
        const uint32_t a_4__b_1_hi = a_4__b_1 >> 32;
        const uint64_t a_4__b_2 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_4__b_2_lo = a_4__b_2;
        const uint32_t a_4__b_2_hi = a_4__b_2 >> 32;
        const uint64_t a_4__b_3 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_4__b_3_lo = a_4__b_3;
        const uint32_t a_4__b_3_hi = a_4__b_3 >> 32;
        const uint64_t a_4__b_4 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_4__b_4_lo = a_4__b_4;
        const uint32_t a_4__b_4_hi = a_4__b_4 >> 32;
        const uint64_t a_4__b_5 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_4__b_5_lo = a_4__b_5;
        const uint32_t a_4__b_5_hi = a_4__b_5 >> 32;
        const uint64_t a_4__b_6 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_4__b_6_lo = a_4__b_6;
        const uint32_t a_4__b_6_hi = a_4__b_6 >> 32;
        const uint64_t a_4__b_7 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_4__b_7_lo = a_4__b_7;
        const uint32_t a_4__b_7_hi = a_4__b_7 >> 32;
        const uint64_t a_4__b_8 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_4__b_8_lo = a_4__b_8;
        const uint32_t a_4__b_8_hi = a_4__b_8 >> 32;
        const uint64_t a_4__b_9 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_4__b_9_lo = a_4__b_9;
        const uint32_t a_4__b_9_hi = a_4__b_9 >> 32;
        const uint64_t a_4__b_10 = ((uint64_t)_src1->x[4]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_4__b_10_lo = a_4__b_10;
        const uint32_t a_4__b_10_hi = a_4__b_10 >> 32;
        const uint64_t a_5__b_0 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_5__b_0_lo = a_5__b_0;
        const uint32_t a_5__b_0_hi = a_5__b_0 >> 32;
        const uint64_t a_5__b_1 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_5__b_1_lo = a_5__b_1;
        const uint32_t a_5__b_1_hi = a_5__b_1 >> 32;
        const uint64_t a_5__b_2 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_5__b_2_lo = a_5__b_2;
        const uint32_t a_5__b_2_hi = a_5__b_2 >> 32;
        const uint64_t a_5__b_3 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_5__b_3_lo = a_5__b_3;
        const uint32_t a_5__b_3_hi = a_5__b_3 >> 32;
        const uint64_t a_5__b_4 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_5__b_4_lo = a_5__b_4;
        const uint32_t a_5__b_4_hi = a_5__b_4 >> 32;
        const uint64_t a_5__b_5 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_5__b_5_lo = a_5__b_5;
        const uint32_t a_5__b_5_hi = a_5__b_5 >> 32;
        const uint64_t a_5__b_6 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_5__b_6_lo = a_5__b_6;
        const uint32_t a_5__b_6_hi = a_5__b_6 >> 32;
        const uint64_t a_5__b_7 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_5__b_7_lo = a_5__b_7;
        const uint32_t a_5__b_7_hi = a_5__b_7 >> 32;
        const uint64_t a_5__b_8 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_5__b_8_lo = a_5__b_8;
        const uint32_t a_5__b_8_hi = a_5__b_8 >> 32;
        const uint64_t a_5__b_9 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_5__b_9_lo = a_5__b_9;
        const uint32_t a_5__b_9_hi = a_5__b_9 >> 32;
        const uint64_t a_5__b_10 = ((uint64_t)_src1->x[5]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_5__b_10_lo = a_5__b_10;
        const uint32_t a_5__b_10_hi = a_5__b_10 >> 32;
        const uint64_t a_6__b_0 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_6__b_0_lo = a_6__b_0;
        const uint32_t a_6__b_0_hi = a_6__b_0 >> 32;
        const uint64_t a_6__b_1 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_6__b_1_lo = a_6__b_1;
        const uint32_t a_6__b_1_hi = a_6__b_1 >> 32;
        const uint64_t a_6__b_2 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_6__b_2_lo = a_6__b_2;
        const uint32_t a_6__b_2_hi = a_6__b_2 >> 32;
        const uint64_t a_6__b_3 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_6__b_3_lo = a_6__b_3;
        const uint32_t a_6__b_3_hi = a_6__b_3 >> 32;
        const uint64_t a_6__b_4 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_6__b_4_lo = a_6__b_4;
        const uint32_t a_6__b_4_hi = a_6__b_4 >> 32;
        const uint64_t a_6__b_5 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_6__b_5_lo = a_6__b_5;
        const uint32_t a_6__b_5_hi = a_6__b_5 >> 32;
        const uint64_t a_6__b_6 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_6__b_6_lo = a_6__b_6;
        const uint32_t a_6__b_6_hi = a_6__b_6 >> 32;
        const uint64_t a_6__b_7 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_6__b_7_lo = a_6__b_7;
        const uint32_t a_6__b_7_hi = a_6__b_7 >> 32;
        const uint64_t a_6__b_8 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_6__b_8_lo = a_6__b_8;
        const uint32_t a_6__b_8_hi = a_6__b_8 >> 32;
        const uint64_t a_6__b_9 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_6__b_9_lo = a_6__b_9;
        const uint32_t a_6__b_9_hi = a_6__b_9 >> 32;
        const uint64_t a_6__b_10 = ((uint64_t)_src1->x[6]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_6__b_10_lo = a_6__b_10;
        const uint32_t a_6__b_10_hi = a_6__b_10 >> 32;
        const uint64_t a_7__b_0 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_7__b_0_lo = a_7__b_0;
        const uint32_t a_7__b_0_hi = a_7__b_0 >> 32;
        const uint64_t a_7__b_1 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_7__b_1_lo = a_7__b_1;
        const uint32_t a_7__b_1_hi = a_7__b_1 >> 32;
        const uint64_t a_7__b_2 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_7__b_2_lo = a_7__b_2;
        const uint32_t a_7__b_2_hi = a_7__b_2 >> 32;
        const uint64_t a_7__b_3 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_7__b_3_lo = a_7__b_3;
        const uint32_t a_7__b_3_hi = a_7__b_3 >> 32;
        const uint64_t a_7__b_4 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_7__b_4_lo = a_7__b_4;
        const uint32_t a_7__b_4_hi = a_7__b_4 >> 32;
        const uint64_t a_7__b_5 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_7__b_5_lo = a_7__b_5;
        const uint32_t a_7__b_5_hi = a_7__b_5 >> 32;
        const uint64_t a_7__b_6 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_7__b_6_lo = a_7__b_6;
        const uint32_t a_7__b_6_hi = a_7__b_6 >> 32;
        const uint64_t a_7__b_7 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_7__b_7_lo = a_7__b_7;
        const uint32_t a_7__b_7_hi = a_7__b_7 >> 32;
        const uint64_t a_7__b_8 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_7__b_8_lo = a_7__b_8;
        const uint32_t a_7__b_8_hi = a_7__b_8 >> 32;
        const uint64_t a_7__b_9 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_7__b_9_lo = a_7__b_9;
        const uint32_t a_7__b_9_hi = a_7__b_9 >> 32;
        const uint64_t a_7__b_10 = ((uint64_t)_src1->x[7]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_7__b_10_lo = a_7__b_10;
        const uint32_t a_7__b_10_hi = a_7__b_10 >> 32;
        const uint64_t a_8__b_0 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_8__b_0_lo = a_8__b_0;
        const uint32_t a_8__b_0_hi = a_8__b_0 >> 32;
        const uint64_t a_8__b_1 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_8__b_1_lo = a_8__b_1;
        const uint32_t a_8__b_1_hi = a_8__b_1 >> 32;
        const uint64_t a_8__b_2 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_8__b_2_lo = a_8__b_2;
        const uint32_t a_8__b_2_hi = a_8__b_2 >> 32;
        const uint64_t a_8__b_3 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_8__b_3_lo = a_8__b_3;
        const uint32_t a_8__b_3_hi = a_8__b_3 >> 32;
        const uint64_t a_8__b_4 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_8__b_4_lo = a_8__b_4;
        const uint32_t a_8__b_4_hi = a_8__b_4 >> 32;
        const uint64_t a_8__b_5 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_8__b_5_lo = a_8__b_5;
        const uint32_t a_8__b_5_hi = a_8__b_5 >> 32;
        const uint64_t a_8__b_6 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_8__b_6_lo = a_8__b_6;
        const uint32_t a_8__b_6_hi = a_8__b_6 >> 32;
        const uint64_t a_8__b_7 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_8__b_7_lo = a_8__b_7;
        const uint32_t a_8__b_7_hi = a_8__b_7 >> 32;
        const uint64_t a_8__b_8 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_8__b_8_lo = a_8__b_8;
        const uint32_t a_8__b_8_hi = a_8__b_8 >> 32;
        const uint64_t a_8__b_9 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_8__b_9_lo = a_8__b_9;
        const uint32_t a_8__b_9_hi = a_8__b_9 >> 32;
        const uint64_t a_8__b_10 = ((uint64_t)_src1->x[8]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_8__b_10_lo = a_8__b_10;
        const uint32_t a_8__b_10_hi = a_8__b_10 >> 32;
        const uint64_t a_9__b_0 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_9__b_0_lo = a_9__b_0;
        const uint32_t a_9__b_0_hi = a_9__b_0 >> 32;
        const uint64_t a_9__b_1 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_9__b_1_lo = a_9__b_1;
        const uint32_t a_9__b_1_hi = a_9__b_1 >> 32;
        const uint64_t a_9__b_2 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_9__b_2_lo = a_9__b_2;
        const uint32_t a_9__b_2_hi = a_9__b_2 >> 32;
        const uint64_t a_9__b_3 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_9__b_3_lo = a_9__b_3;
        const uint32_t a_9__b_3_hi = a_9__b_3 >> 32;
        const uint64_t a_9__b_4 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_9__b_4_lo = a_9__b_4;
        const uint32_t a_9__b_4_hi = a_9__b_4 >> 32;
        const uint64_t a_9__b_5 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_9__b_5_lo = a_9__b_5;
        const uint32_t a_9__b_5_hi = a_9__b_5 >> 32;
        const uint64_t a_9__b_6 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_9__b_6_lo = a_9__b_6;
        const uint32_t a_9__b_6_hi = a_9__b_6 >> 32;
        const uint64_t a_9__b_7 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_9__b_7_lo = a_9__b_7;
        const uint32_t a_9__b_7_hi = a_9__b_7 >> 32;
        const uint64_t a_9__b_8 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_9__b_8_lo = a_9__b_8;
        const uint32_t a_9__b_8_hi = a_9__b_8 >> 32;
        const uint64_t a_9__b_9 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_9__b_9_lo = a_9__b_9;
        const uint32_t a_9__b_9_hi = a_9__b_9 >> 32;
        const uint64_t a_9__b_10 = ((uint64_t)_src1->x[9]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_9__b_10_lo = a_9__b_10;
        const uint32_t a_9__b_10_hi = a_9__b_10 >> 32;
        const uint64_t a_10__b_0 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[0]);
        const uint32_t a_10__b_0_lo = a_10__b_0;
        const uint32_t a_10__b_0_hi = a_10__b_0 >> 32;
        const uint64_t a_10__b_1 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[1]);
        const uint32_t a_10__b_1_lo = a_10__b_1;
        const uint32_t a_10__b_1_hi = a_10__b_1 >> 32;
        const uint64_t a_10__b_2 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[2]);
        const uint32_t a_10__b_2_lo = a_10__b_2;
        const uint32_t a_10__b_2_hi = a_10__b_2 >> 32;
        const uint64_t a_10__b_3 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[3]);
        const uint32_t a_10__b_3_lo = a_10__b_3;
        const uint32_t a_10__b_3_hi = a_10__b_3 >> 32;
        const uint64_t a_10__b_4 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[4]);
        const uint32_t a_10__b_4_lo = a_10__b_4;
        const uint32_t a_10__b_4_hi = a_10__b_4 >> 32;
        const uint64_t a_10__b_5 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[5]);
        const uint32_t a_10__b_5_lo = a_10__b_5;
        const uint32_t a_10__b_5_hi = a_10__b_5 >> 32;
        const uint64_t a_10__b_6 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[6]);
        const uint32_t a_10__b_6_lo = a_10__b_6;
        const uint32_t a_10__b_6_hi = a_10__b_6 >> 32;
        const uint64_t a_10__b_7 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[7]);
        const uint32_t a_10__b_7_lo = a_10__b_7;
        const uint32_t a_10__b_7_hi = a_10__b_7 >> 32;
        const uint64_t a_10__b_8 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[8]);
        const uint32_t a_10__b_8_lo = a_10__b_8;
        const uint32_t a_10__b_8_hi = a_10__b_8 >> 32;
        const uint64_t a_10__b_9 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[9]);
        const uint32_t a_10__b_9_lo = a_10__b_9;
        const uint32_t a_10__b_9_hi = a_10__b_9 >> 32;
        const uint64_t a_10__b_10 = ((uint64_t)_src1->x[10]) * ((uint64_t)_src2->x[10]);
        const uint32_t a_10__b_10_lo = a_10__b_10;
        const uint32_t a_10__b_10_hi = a_10__b_10 >> 32;
        
        /* Limbs of the product C = A*B */
        uint32_t q_0 = 0;
        uint32_t q_1 = 0;
        uint32_t q_2 = 0;
        uint32_t q_3 = 0;
        uint32_t q_4 = 0;
        uint32_t q_5 = 0;
        uint32_t q_6 = 0;
        uint32_t q_7 = 0;
        uint32_t q_8 = 0;
        uint32_t q_9 = 0;
        uint32_t q_10 = 0;
        uint32_t c_0 = 0;
        uint32_t c_1 = 0;
        uint32_t c_2 = 0;
        uint32_t c_3 = 0;
        uint32_t c_4 = 0;
        uint32_t c_5 = 0;
        uint32_t c_6 = 0;
        uint32_t c_7 = 0;
        uint32_t c_8 = 0;
        uint32_t c_9 = 0;
        uint32_t c_10 = 0;
        uint32_t c_11 = 0;
        uint32_t c_12 = 0;
        uint32_t c_13 = 0;
        uint32_t c_14 = 0;
        uint32_t c_15 = 0;
        uint32_t c_16 = 0;
        uint32_t c_17 = 0;
        uint32_t c_18 = 0;
        uint32_t c_19 = 0;
        uint32_t c_20 = 0;
        uint32_t c_21 = 0;
        uint32_t c_22 = 0;
        
        /* The product of the q_i's with N */
        uint64_t q_0__N_0 = 0;
        uint64_t q_0__N_1 = 0;
        uint64_t q_0__N_2 = 0;
        uint64_t q_0__N_3 = 0;
        uint64_t q_0__N_4 = 0;
        uint64_t q_0__N_5 = 0;
        uint64_t q_0__N_6 = 0;
        uint64_t q_0__N_7 = 0;
        uint64_t q_0__N_8 = 0;
        uint64_t q_0__N_9 = 0;
        uint64_t q_0__N_10 = 0;
        uint64_t q_1__N_0 = 0;
        uint64_t q_1__N_1 = 0;
        uint64_t q_1__N_2 = 0;
        uint64_t q_1__N_3 = 0;
        uint64_t q_1__N_4 = 0;
        uint64_t q_1__N_5 = 0;
        uint64_t q_1__N_6 = 0;
        uint64_t q_1__N_7 = 0;
        uint64_t q_1__N_8 = 0;
        uint64_t q_1__N_9 = 0;
        uint64_t q_1__N_10 = 0;
        uint64_t q_2__N_0 = 0;
        uint64_t q_2__N_1 = 0;
        uint64_t q_2__N_2 = 0;
        uint64_t q_2__N_3 = 0;
        uint64_t q_2__N_4 = 0;
        uint64_t q_2__N_5 = 0;
        uint64_t q_2__N_6 = 0;
        uint64_t q_2__N_7 = 0;
        uint64_t q_2__N_8 = 0;
        uint64_t q_2__N_9 = 0;
        uint64_t q_2__N_10 = 0;
        uint64_t q_3__N_0 = 0;
        uint64_t q_3__N_1 = 0;
        uint64_t q_3__N_2 = 0;
        uint64_t q_3__N_3 = 0;
        uint64_t q_3__N_4 = 0;
        uint64_t q_3__N_5 = 0;
        uint64_t q_3__N_6 = 0;
        uint64_t q_3__N_7 = 0;
        uint64_t q_3__N_8 = 0;
        uint64_t q_3__N_9 = 0;
        uint64_t q_3__N_10 = 0;
        uint64_t q_4__N_0 = 0;
        uint64_t q_4__N_1 = 0;
        uint64_t q_4__N_2 = 0;
        uint64_t q_4__N_3 = 0;
        uint64_t q_4__N_4 = 0;
        uint64_t q_4__N_5 = 0;
        uint64_t q_4__N_6 = 0;
        uint64_t q_4__N_7 = 0;
        uint64_t q_4__N_8 = 0;
        uint64_t q_4__N_9 = 0;
        uint64_t q_4__N_10 = 0;
        uint64_t q_5__N_0 = 0;
        uint64_t q_5__N_1 = 0;
        uint64_t q_5__N_2 = 0;
        uint64_t q_5__N_3 = 0;
        uint64_t q_5__N_4 = 0;
        uint64_t q_5__N_5 = 0;
        uint64_t q_5__N_6 = 0;
        uint64_t q_5__N_7 = 0;
        uint64_t q_5__N_8 = 0;
        uint64_t q_5__N_9 = 0;
        uint64_t q_5__N_10 = 0;
        uint64_t q_6__N_0 = 0;
        uint64_t q_6__N_1 = 0;
        uint64_t q_6__N_2 = 0;
        uint64_t q_6__N_3 = 0;
        uint64_t q_6__N_4 = 0;
        uint64_t q_6__N_5 = 0;
        uint64_t q_6__N_6 = 0;
        uint64_t q_6__N_7 = 0;
        uint64_t q_6__N_8 = 0;
        uint64_t q_6__N_9 = 0;
        uint64_t q_6__N_10 = 0;
        uint64_t q_7__N_0 = 0;
        uint64_t q_7__N_1 = 0;
        uint64_t q_7__N_2 = 0;
        uint64_t q_7__N_3 = 0;
        uint64_t q_7__N_4 = 0;
        uint64_t q_7__N_5 = 0;
        uint64_t q_7__N_6 = 0;
        uint64_t q_7__N_7 = 0;
        uint64_t q_7__N_8 = 0;
        uint64_t q_7__N_9 = 0;
        uint64_t q_7__N_10 = 0;
        uint64_t q_8__N_0 = 0;
        uint64_t q_8__N_1 = 0;
        uint64_t q_8__N_2 = 0;
        uint64_t q_8__N_3 = 0;
        uint64_t q_8__N_4 = 0;
        uint64_t q_8__N_5 = 0;
        uint64_t q_8__N_6 = 0;
        uint64_t q_8__N_7 = 0;
        uint64_t q_8__N_8 = 0;
        uint64_t q_8__N_9 = 0;
        uint64_t q_8__N_10 = 0;
        uint64_t q_9__N_0 = 0;
        uint64_t q_9__N_1 = 0;
        uint64_t q_9__N_2 = 0;
        uint64_t q_9__N_3 = 0;
        uint64_t q_9__N_4 = 0;
        uint64_t q_9__N_5 = 0;
        uint64_t q_9__N_6 = 0;
        uint64_t q_9__N_7 = 0;
        uint64_t q_9__N_8 = 0;
        uint64_t q_9__N_9 = 0;
        uint64_t q_9__N_10 = 0;
        uint64_t q_10__N_0 = 0;
        uint64_t q_10__N_1 = 0;
        uint64_t q_10__N_2 = 0;
        uint64_t q_10__N_3 = 0;
        uint64_t q_10__N_4 = 0;
        uint64_t q_10__N_5 = 0;
        uint64_t q_10__N_6 = 0;
        uint64_t q_10__N_7 = 0;
        uint64_t q_10__N_8 = 0;
        uint64_t q_10__N_9 = 0;
        uint64_t q_10__N_10 = 0;
        
        /* Compute c_0 */
        {
            /* Add the product terms into c_0, accumulating carries in c_1 */
            c_1 += ul32_addc(&c_0, &c_0, &a_0__b_0_lo);
            
            /* Add the q_i*N's for i < 0 */
            
            /* Compute q_0 and add its product with N */
            q_0 = n->np * c_0;
            q_0__N_0 = ((uint64_t)q_0) * ((uint64_t)n->n->x[0]);
            q_0__N_1 = ((uint64_t)q_0) * ((uint64_t)n->n->x[1]);
            q_0__N_2 = ((uint64_t)q_0) * ((uint64_t)n->n->x[2]);
            q_0__N_3 = ((uint64_t)q_0) * ((uint64_t)n->n->x[3]);
            q_0__N_4 = ((uint64_t)q_0) * ((uint64_t)n->n->x[4]);
            q_0__N_5 = ((uint64_t)q_0) * ((uint64_t)n->n->x[5]);
            q_0__N_6 = ((uint64_t)q_0) * ((uint64_t)n->n->x[6]);
            q_0__N_7 = ((uint64_t)q_0) * ((uint64_t)n->n->x[7]);
            q_0__N_8 = ((uint64_t)q_0) * ((uint64_t)n->n->x[8]);
            q_0__N_9 = ((uint64_t)q_0) * ((uint64_t)n->n->x[9]);
            q_0__N_10 = ((uint64_t)q_0) * ((uint64_t)n->n->x[10]);
            const uint32_t q_0__N_0_lo = q_0__N_0;
            c_1 += ul32_addc(&c_0, &c_0, &q_0__N_0_lo);
        }
        
        /* Compute c_1 */
        {
            /* Add the product terms into c_1, accumulating carries in c_2 */
            c_2 += ul32_addc(&c_1, &c_1, &a_0__b_0_hi);
            c_2 += ul32_addc(&c_1, &c_1, &a_0__b_1_lo);
            c_2 += ul32_addc(&c_1, &c_1, &a_1__b_0_lo);
            
            /* Add the q_i*N's for i < 1 */
            const uint32_t q_0__N_1_lo = q_0__N_1;
            c_2 += ul32_addc(&c_1, &c_1, &q_0__N_1_lo);
            const uint32_t q_0__N_0_hi = q_0__N_0 >> 32;
            c_2 += ul32_addc(&c_1, &c_1, &q_0__N_0_hi);
            
            /* Compute q_1 and add its product with N */
            q_1 = n->np * c_1;
            q_1__N_0 = ((uint64_t)q_1) * ((uint64_t)n->n->x[0]);
            q_1__N_1 = ((uint64_t)q_1) * ((uint64_t)n->n->x[1]);
            q_1__N_2 = ((uint64_t)q_1) * ((uint64_t)n->n->x[2]);
            q_1__N_3 = ((uint64_t)q_1) * ((uint64_t)n->n->x[3]);
            q_1__N_4 = ((uint64_t)q_1) * ((uint64_t)n->n->x[4]);
            q_1__N_5 = ((uint64_t)q_1) * ((uint64_t)n->n->x[5]);
            q_1__N_6 = ((uint64_t)q_1) * ((uint64_t)n->n->x[6]);
            q_1__N_7 = ((uint64_t)q_1) * ((uint64_t)n->n->x[7]);
            q_1__N_8 = ((uint64_t)q_1) * ((uint64_t)n->n->x[8]);
            q_1__N_9 = ((uint64_t)q_1) * ((uint64_t)n->n->x[9]);
            q_1__N_10 = ((uint64_t)q_1) * ((uint64_t)n->n->x[10]);
            const uint32_t q_1__N_0_lo = q_1__N_0;
            c_2 += ul32_addc(&c_1, &c_1, &q_1__N_0_lo);
        }
        
        /* Compute c_2 */
        {
            /* Add the product terms into c_2, accumulating carries in c_3 */
            c_3 += ul32_addc(&c_2, &c_2, &a_0__b_1_hi);
            c_3 += ul32_addc(&c_2, &c_2, &a_0__b_2_lo);
            c_3 += ul32_addc(&c_2, &c_2, &a_1__b_0_hi);
            c_3 += ul32_addc(&c_2, &c_2, &a_1__b_1_lo);
            c_3 += ul32_addc(&c_2, &c_2, &a_2__b_0_lo);
            
            /* Add the q_i*N's for i < 2 */
            const uint32_t q_0__N_2_lo = q_0__N_2;
            c_3 += ul32_addc(&c_2, &c_2, &q_0__N_2_lo);
            const uint32_t q_0__N_1_hi = q_0__N_1 >> 32;
            c_3 += ul32_addc(&c_2, &c_2, &q_0__N_1_hi);
            const uint32_t q_1__N_1_lo = q_1__N_1;
            c_3 += ul32_addc(&c_2, &c_2, &q_1__N_1_lo);
            const uint32_t q_1__N_0_hi = q_1__N_0 >> 32;
            c_3 += ul32_addc(&c_2, &c_2, &q_1__N_0_hi);
            
            /* Compute q_2 and add its product with N */
            q_2 = n->np * c_2;
            q_2__N_0 = ((uint64_t)q_2) * ((uint64_t)n->n->x[0]);
            q_2__N_1 = ((uint64_t)q_2) * ((uint64_t)n->n->x[1]);
            q_2__N_2 = ((uint64_t)q_2) * ((uint64_t)n->n->x[2]);
            q_2__N_3 = ((uint64_t)q_2) * ((uint64_t)n->n->x[3]);
            q_2__N_4 = ((uint64_t)q_2) * ((uint64_t)n->n->x[4]);
            q_2__N_5 = ((uint64_t)q_2) * ((uint64_t)n->n->x[5]);
            q_2__N_6 = ((uint64_t)q_2) * ((uint64_t)n->n->x[6]);
            q_2__N_7 = ((uint64_t)q_2) * ((uint64_t)n->n->x[7]);
            q_2__N_8 = ((uint64_t)q_2) * ((uint64_t)n->n->x[8]);
            q_2__N_9 = ((uint64_t)q_2) * ((uint64_t)n->n->x[9]);
            q_2__N_10 = ((uint64_t)q_2) * ((uint64_t)n->n->x[10]);
            const uint32_t q_2__N_0_lo = q_2__N_0;
            c_3 += ul32_addc(&c_2, &c_2, &q_2__N_0_lo);
        }
        
        /* Compute c_3 */
        {
            /* Add the product terms into c_3, accumulating carries in c_4 */
            c_4 += ul32_addc(&c_3, &c_3, &a_0__b_2_hi);
            c_4 += ul32_addc(&c_3, &c_3, &a_0__b_3_lo);
            c_4 += ul32_addc(&c_3, &c_3, &a_1__b_1_hi);
            c_4 += ul32_addc(&c_3, &c_3, &a_1__b_2_lo);
            c_4 += ul32_addc(&c_3, &c_3, &a_2__b_0_hi);
            c_4 += ul32_addc(&c_3, &c_3, &a_2__b_1_lo);
            c_4 += ul32_addc(&c_3, &c_3, &a_3__b_0_lo);
            
            /* Add the q_i*N's for i < 3 */
            const uint32_t q_0__N_3_lo = q_0__N_3;
            c_4 += ul32_addc(&c_3, &c_3, &q_0__N_3_lo);
            const uint32_t q_0__N_2_hi = q_0__N_2 >> 32;
            c_4 += ul32_addc(&c_3, &c_3, &q_0__N_2_hi);
            const uint32_t q_1__N_2_lo = q_1__N_2;
            c_4 += ul32_addc(&c_3, &c_3, &q_1__N_2_lo);
            const uint32_t q_1__N_1_hi = q_1__N_1 >> 32;
            c_4 += ul32_addc(&c_3, &c_3, &q_1__N_1_hi);
            const uint32_t q_2__N_1_lo = q_2__N_1;
            c_4 += ul32_addc(&c_3, &c_3, &q_2__N_1_lo);
            const uint32_t q_2__N_0_hi = q_2__N_0 >> 32;
            c_4 += ul32_addc(&c_3, &c_3, &q_2__N_0_hi);
            
            /* Compute q_3 and add its product with N */
            q_3 = n->np * c_3;
            q_3__N_0 = ((uint64_t)q_3) * ((uint64_t)n->n->x[0]);
            q_3__N_1 = ((uint64_t)q_3) * ((uint64_t)n->n->x[1]);
            q_3__N_2 = ((uint64_t)q_3) * ((uint64_t)n->n->x[2]);
            q_3__N_3 = ((uint64_t)q_3) * ((uint64_t)n->n->x[3]);
            q_3__N_4 = ((uint64_t)q_3) * ((uint64_t)n->n->x[4]);
            q_3__N_5 = ((uint64_t)q_3) * ((uint64_t)n->n->x[5]);
            q_3__N_6 = ((uint64_t)q_3) * ((uint64_t)n->n->x[6]);
            q_3__N_7 = ((uint64_t)q_3) * ((uint64_t)n->n->x[7]);
            q_3__N_8 = ((uint64_t)q_3) * ((uint64_t)n->n->x[8]);
            q_3__N_9 = ((uint64_t)q_3) * ((uint64_t)n->n->x[9]);
            q_3__N_10 = ((uint64_t)q_3) * ((uint64_t)n->n->x[10]);
            const uint32_t q_3__N_0_lo = q_3__N_0;
            c_4 += ul32_addc(&c_3, &c_3, &q_3__N_0_lo);
        }
        
        /* Compute c_4 */
        {
            /* Add the product terms into c_4, accumulating carries in c_5 */
            c_5 += ul32_addc(&c_4, &c_4, &a_0__b_3_hi);
            c_5 += ul32_addc(&c_4, &c_4, &a_0__b_4_lo);
            c_5 += ul32_addc(&c_4, &c_4, &a_1__b_2_hi);
            c_5 += ul32_addc(&c_4, &c_4, &a_1__b_3_lo);
            c_5 += ul32_addc(&c_4, &c_4, &a_2__b_1_hi);
            c_5 += ul32_addc(&c_4, &c_4, &a_2__b_2_lo);
            c_5 += ul32_addc(&c_4, &c_4, &a_3__b_0_hi);
            c_5 += ul32_addc(&c_4, &c_4, &a_3__b_1_lo);
            c_5 += ul32_addc(&c_4, &c_4, &a_4__b_0_lo);
            
            /* Add the q_i*N's for i < 4 */
            const uint32_t q_0__N_4_lo = q_0__N_4;
            c_5 += ul32_addc(&c_4, &c_4, &q_0__N_4_lo);
            const uint32_t q_0__N_3_hi = q_0__N_3 >> 32;
            c_5 += ul32_addc(&c_4, &c_4, &q_0__N_3_hi);
            const uint32_t q_1__N_3_lo = q_1__N_3;
            c_5 += ul32_addc(&c_4, &c_4, &q_1__N_3_lo);
            const uint32_t q_1__N_2_hi = q_1__N_2 >> 32;
            c_5 += ul32_addc(&c_4, &c_4, &q_1__N_2_hi);
            const uint32_t q_2__N_2_lo = q_2__N_2;
            c_5 += ul32_addc(&c_4, &c_4, &q_2__N_2_lo);
            const uint32_t q_2__N_1_hi = q_2__N_1 >> 32;
            c_5 += ul32_addc(&c_4, &c_4, &q_2__N_1_hi);
            const uint32_t q_3__N_1_lo = q_3__N_1;
            c_5 += ul32_addc(&c_4, &c_4, &q_3__N_1_lo);
            const uint32_t q_3__N_0_hi = q_3__N_0 >> 32;
            c_5 += ul32_addc(&c_4, &c_4, &q_3__N_0_hi);
            
            /* Compute q_4 and add its product with N */
            q_4 = n->np * c_4;
            q_4__N_0 = ((uint64_t)q_4) * ((uint64_t)n->n->x[0]);
            q_4__N_1 = ((uint64_t)q_4) * ((uint64_t)n->n->x[1]);
            q_4__N_2 = ((uint64_t)q_4) * ((uint64_t)n->n->x[2]);
            q_4__N_3 = ((uint64_t)q_4) * ((uint64_t)n->n->x[3]);
            q_4__N_4 = ((uint64_t)q_4) * ((uint64_t)n->n->x[4]);
            q_4__N_5 = ((uint64_t)q_4) * ((uint64_t)n->n->x[5]);
            q_4__N_6 = ((uint64_t)q_4) * ((uint64_t)n->n->x[6]);
            q_4__N_7 = ((uint64_t)q_4) * ((uint64_t)n->n->x[7]);
            q_4__N_8 = ((uint64_t)q_4) * ((uint64_t)n->n->x[8]);
            q_4__N_9 = ((uint64_t)q_4) * ((uint64_t)n->n->x[9]);
            q_4__N_10 = ((uint64_t)q_4) * ((uint64_t)n->n->x[10]);
            const uint32_t q_4__N_0_lo = q_4__N_0;
            c_5 += ul32_addc(&c_4, &c_4, &q_4__N_0_lo);
        }
        
        /* Compute c_5 */
        {
            /* Add the product terms into c_5, accumulating carries in c_6 */
            c_6 += ul32_addc(&c_5, &c_5, &a_0__b_4_hi);
            c_6 += ul32_addc(&c_5, &c_5, &a_0__b_5_lo);
            c_6 += ul32_addc(&c_5, &c_5, &a_1__b_3_hi);
            c_6 += ul32_addc(&c_5, &c_5, &a_1__b_4_lo);
            c_6 += ul32_addc(&c_5, &c_5, &a_2__b_2_hi);
            c_6 += ul32_addc(&c_5, &c_5, &a_2__b_3_lo);
            c_6 += ul32_addc(&c_5, &c_5, &a_3__b_1_hi);
            c_6 += ul32_addc(&c_5, &c_5, &a_3__b_2_lo);
            c_6 += ul32_addc(&c_5, &c_5, &a_4__b_0_hi);
            c_6 += ul32_addc(&c_5, &c_5, &a_4__b_1_lo);
            c_6 += ul32_addc(&c_5, &c_5, &a_5__b_0_lo);
            
            /* Add the q_i*N's for i < 5 */
            const uint32_t q_0__N_5_lo = q_0__N_5;
            c_6 += ul32_addc(&c_5, &c_5, &q_0__N_5_lo);
            const uint32_t q_0__N_4_hi = q_0__N_4 >> 32;
            c_6 += ul32_addc(&c_5, &c_5, &q_0__N_4_hi);
            const uint32_t q_1__N_4_lo = q_1__N_4;
            c_6 += ul32_addc(&c_5, &c_5, &q_1__N_4_lo);
            const uint32_t q_1__N_3_hi = q_1__N_3 >> 32;
            c_6 += ul32_addc(&c_5, &c_5, &q_1__N_3_hi);
            const uint32_t q_2__N_3_lo = q_2__N_3;
            c_6 += ul32_addc(&c_5, &c_5, &q_2__N_3_lo);
            const uint32_t q_2__N_2_hi = q_2__N_2 >> 32;
            c_6 += ul32_addc(&c_5, &c_5, &q_2__N_2_hi);
            const uint32_t q_3__N_2_lo = q_3__N_2;
            c_6 += ul32_addc(&c_5, &c_5, &q_3__N_2_lo);
            const uint32_t q_3__N_1_hi = q_3__N_1 >> 32;
            c_6 += ul32_addc(&c_5, &c_5, &q_3__N_1_hi);
            const uint32_t q_4__N_1_lo = q_4__N_1;
            c_6 += ul32_addc(&c_5, &c_5, &q_4__N_1_lo);
            const uint32_t q_4__N_0_hi = q_4__N_0 >> 32;
            c_6 += ul32_addc(&c_5, &c_5, &q_4__N_0_hi);
            
            /* Compute q_5 and add its product with N */
            q_5 = n->np * c_5;
            q_5__N_0 = ((uint64_t)q_5) * ((uint64_t)n->n->x[0]);
            q_5__N_1 = ((uint64_t)q_5) * ((uint64_t)n->n->x[1]);
            q_5__N_2 = ((uint64_t)q_5) * ((uint64_t)n->n->x[2]);
            q_5__N_3 = ((uint64_t)q_5) * ((uint64_t)n->n->x[3]);
            q_5__N_4 = ((uint64_t)q_5) * ((uint64_t)n->n->x[4]);
            q_5__N_5 = ((uint64_t)q_5) * ((uint64_t)n->n->x[5]);
            q_5__N_6 = ((uint64_t)q_5) * ((uint64_t)n->n->x[6]);
            q_5__N_7 = ((uint64_t)q_5) * ((uint64_t)n->n->x[7]);
            q_5__N_8 = ((uint64_t)q_5) * ((uint64_t)n->n->x[8]);
            q_5__N_9 = ((uint64_t)q_5) * ((uint64_t)n->n->x[9]);
            q_5__N_10 = ((uint64_t)q_5) * ((uint64_t)n->n->x[10]);
            const uint32_t q_5__N_0_lo = q_5__N_0;
            c_6 += ul32_addc(&c_5, &c_5, &q_5__N_0_lo);
        }
        
        /* Compute c_6 */
        {
            /* Add the product terms into c_6, accumulating carries in c_7 */
            c_7 += ul32_addc(&c_6, &c_6, &a_0__b_5_hi);
            c_7 += ul32_addc(&c_6, &c_6, &a_0__b_6_lo);
            c_7 += ul32_addc(&c_6, &c_6, &a_1__b_4_hi);
            c_7 += ul32_addc(&c_6, &c_6, &a_1__b_5_lo);
            c_7 += ul32_addc(&c_6, &c_6, &a_2__b_3_hi);
            c_7 += ul32_addc(&c_6, &c_6, &a_2__b_4_lo);
            c_7 += ul32_addc(&c_6, &c_6, &a_3__b_2_hi);
            c_7 += ul32_addc(&c_6, &c_6, &a_3__b_3_lo);
            c_7 += ul32_addc(&c_6, &c_6, &a_4__b_1_hi);
            c_7 += ul32_addc(&c_6, &c_6, &a_4__b_2_lo);
            c_7 += ul32_addc(&c_6, &c_6, &a_5__b_0_hi);
            c_7 += ul32_addc(&c_6, &c_6, &a_5__b_1_lo);
            c_7 += ul32_addc(&c_6, &c_6, &a_6__b_0_lo);
            
            /* Add the q_i*N's for i < 6 */
            const uint32_t q_0__N_6_lo = q_0__N_6;
            c_7 += ul32_addc(&c_6, &c_6, &q_0__N_6_lo);
            const uint32_t q_0__N_5_hi = q_0__N_5 >> 32;
            c_7 += ul32_addc(&c_6, &c_6, &q_0__N_5_hi);
            const uint32_t q_1__N_5_lo = q_1__N_5;
            c_7 += ul32_addc(&c_6, &c_6, &q_1__N_5_lo);
            const uint32_t q_1__N_4_hi = q_1__N_4 >> 32;
            c_7 += ul32_addc(&c_6, &c_6, &q_1__N_4_hi);
            const uint32_t q_2__N_4_lo = q_2__N_4;
            c_7 += ul32_addc(&c_6, &c_6, &q_2__N_4_lo);
            const uint32_t q_2__N_3_hi = q_2__N_3 >> 32;
            c_7 += ul32_addc(&c_6, &c_6, &q_2__N_3_hi);
            const uint32_t q_3__N_3_lo = q_3__N_3;
            c_7 += ul32_addc(&c_6, &c_6, &q_3__N_3_lo);
            const uint32_t q_3__N_2_hi = q_3__N_2 >> 32;
            c_7 += ul32_addc(&c_6, &c_6, &q_3__N_2_hi);
            const uint32_t q_4__N_2_lo = q_4__N_2;
            c_7 += ul32_addc(&c_6, &c_6, &q_4__N_2_lo);
            const uint32_t q_4__N_1_hi = q_4__N_1 >> 32;
            c_7 += ul32_addc(&c_6, &c_6, &q_4__N_1_hi);
            const uint32_t q_5__N_1_lo = q_5__N_1;
            c_7 += ul32_addc(&c_6, &c_6, &q_5__N_1_lo);
            const uint32_t q_5__N_0_hi = q_5__N_0 >> 32;
            c_7 += ul32_addc(&c_6, &c_6, &q_5__N_0_hi);
            
            /* Compute q_6 and add its product with N */
            q_6 = n->np * c_6;
            q_6__N_0 = ((uint64_t)q_6) * ((uint64_t)n->n->x[0]);
            q_6__N_1 = ((uint64_t)q_6) * ((uint64_t)n->n->x[1]);
            q_6__N_2 = ((uint64_t)q_6) * ((uint64_t)n->n->x[2]);
            q_6__N_3 = ((uint64_t)q_6) * ((uint64_t)n->n->x[3]);
            q_6__N_4 = ((uint64_t)q_6) * ((uint64_t)n->n->x[4]);
            q_6__N_5 = ((uint64_t)q_6) * ((uint64_t)n->n->x[5]);
            q_6__N_6 = ((uint64_t)q_6) * ((uint64_t)n->n->x[6]);
            q_6__N_7 = ((uint64_t)q_6) * ((uint64_t)n->n->x[7]);
            q_6__N_8 = ((uint64_t)q_6) * ((uint64_t)n->n->x[8]);
            q_6__N_9 = ((uint64_t)q_6) * ((uint64_t)n->n->x[9]);
            q_6__N_10 = ((uint64_t)q_6) * ((uint64_t)n->n->x[10]);
            const uint32_t q_6__N_0_lo = q_6__N_0;
            c_7 += ul32_addc(&c_6, &c_6, &q_6__N_0_lo);
        }
        
        /* Compute c_7 */
        {
            /* Add the product terms into c_7, accumulating carries in c_8 */
            c_8 += ul32_addc(&c_7, &c_7, &a_0__b_6_hi);
            c_8 += ul32_addc(&c_7, &c_7, &a_0__b_7_lo);
            c_8 += ul32_addc(&c_7, &c_7, &a_1__b_5_hi);
            c_8 += ul32_addc(&c_7, &c_7, &a_1__b_6_lo);
            c_8 += ul32_addc(&c_7, &c_7, &a_2__b_4_hi);
            c_8 += ul32_addc(&c_7, &c_7, &a_2__b_5_lo);
            c_8 += ul32_addc(&c_7, &c_7, &a_3__b_3_hi);
            c_8 += ul32_addc(&c_7, &c_7, &a_3__b_4_lo);
            c_8 += ul32_addc(&c_7, &c_7, &a_4__b_2_hi);
            c_8 += ul32_addc(&c_7, &c_7, &a_4__b_3_lo);
            c_8 += ul32_addc(&c_7, &c_7, &a_5__b_1_hi);
            c_8 += ul32_addc(&c_7, &c_7, &a_5__b_2_lo);
            c_8 += ul32_addc(&c_7, &c_7, &a_6__b_0_hi);
            c_8 += ul32_addc(&c_7, &c_7, &a_6__b_1_lo);
            c_8 += ul32_addc(&c_7, &c_7, &a_7__b_0_lo);
            
            /* Add the q_i*N's for i < 7 */
            const uint32_t q_0__N_7_lo = q_0__N_7;
            c_8 += ul32_addc(&c_7, &c_7, &q_0__N_7_lo);
            const uint32_t q_0__N_6_hi = q_0__N_6 >> 32;
            c_8 += ul32_addc(&c_7, &c_7, &q_0__N_6_hi);
            const uint32_t q_1__N_6_lo = q_1__N_6;
            c_8 += ul32_addc(&c_7, &c_7, &q_1__N_6_lo);
            const uint32_t q_1__N_5_hi = q_1__N_5 >> 32;
            c_8 += ul32_addc(&c_7, &c_7, &q_1__N_5_hi);
            const uint32_t q_2__N_5_lo = q_2__N_5;
            c_8 += ul32_addc(&c_7, &c_7, &q_2__N_5_lo);
            const uint32_t q_2__N_4_hi = q_2__N_4 >> 32;
            c_8 += ul32_addc(&c_7, &c_7, &q_2__N_4_hi);
            const uint32_t q_3__N_4_lo = q_3__N_4;
            c_8 += ul32_addc(&c_7, &c_7, &q_3__N_4_lo);
            const uint32_t q_3__N_3_hi = q_3__N_3 >> 32;
            c_8 += ul32_addc(&c_7, &c_7, &q_3__N_3_hi);
            const uint32_t q_4__N_3_lo = q_4__N_3;
            c_8 += ul32_addc(&c_7, &c_7, &q_4__N_3_lo);
            const uint32_t q_4__N_2_hi = q_4__N_2 >> 32;
            c_8 += ul32_addc(&c_7, &c_7, &q_4__N_2_hi);
            const uint32_t q_5__N_2_lo = q_5__N_2;
            c_8 += ul32_addc(&c_7, &c_7, &q_5__N_2_lo);
            const uint32_t q_5__N_1_hi = q_5__N_1 >> 32;
            c_8 += ul32_addc(&c_7, &c_7, &q_5__N_1_hi);
            const uint32_t q_6__N_1_lo = q_6__N_1;
            c_8 += ul32_addc(&c_7, &c_7, &q_6__N_1_lo);
            const uint32_t q_6__N_0_hi = q_6__N_0 >> 32;
            c_8 += ul32_addc(&c_7, &c_7, &q_6__N_0_hi);
            
            /* Compute q_7 and add its product with N */
            q_7 = n->np * c_7;
            q_7__N_0 = ((uint64_t)q_7) * ((uint64_t)n->n->x[0]);
            q_7__N_1 = ((uint64_t)q_7) * ((uint64_t)n->n->x[1]);
            q_7__N_2 = ((uint64_t)q_7) * ((uint64_t)n->n->x[2]);
            q_7__N_3 = ((uint64_t)q_7) * ((uint64_t)n->n->x[3]);
            q_7__N_4 = ((uint64_t)q_7) * ((uint64_t)n->n->x[4]);
            q_7__N_5 = ((uint64_t)q_7) * ((uint64_t)n->n->x[5]);
            q_7__N_6 = ((uint64_t)q_7) * ((uint64_t)n->n->x[6]);
            q_7__N_7 = ((uint64_t)q_7) * ((uint64_t)n->n->x[7]);
            q_7__N_8 = ((uint64_t)q_7) * ((uint64_t)n->n->x[8]);
            q_7__N_9 = ((uint64_t)q_7) * ((uint64_t)n->n->x[9]);
            q_7__N_10 = ((uint64_t)q_7) * ((uint64_t)n->n->x[10]);
            const uint32_t q_7__N_0_lo = q_7__N_0;
            c_8 += ul32_addc(&c_7, &c_7, &q_7__N_0_lo);
        }
        
        /* Compute c_8 */
        {
            /* Add the product terms into c_8, accumulating carries in c_9 */
            c_9 += ul32_addc(&c_8, &c_8, &a_0__b_7_hi);
            c_9 += ul32_addc(&c_8, &c_8, &a_0__b_8_lo);
            c_9 += ul32_addc(&c_8, &c_8, &a_1__b_6_hi);
            c_9 += ul32_addc(&c_8, &c_8, &a_1__b_7_lo);
            c_9 += ul32_addc(&c_8, &c_8, &a_2__b_5_hi);
            c_9 += ul32_addc(&c_8, &c_8, &a_2__b_6_lo);
            c_9 += ul32_addc(&c_8, &c_8, &a_3__b_4_hi);
            c_9 += ul32_addc(&c_8, &c_8, &a_3__b_5_lo);
            c_9 += ul32_addc(&c_8, &c_8, &a_4__b_3_hi);
            c_9 += ul32_addc(&c_8, &c_8, &a_4__b_4_lo);
            c_9 += ul32_addc(&c_8, &c_8, &a_5__b_2_hi);
            c_9 += ul32_addc(&c_8, &c_8, &a_5__b_3_lo);
            c_9 += ul32_addc(&c_8, &c_8, &a_6__b_1_hi);
            c_9 += ul32_addc(&c_8, &c_8, &a_6__b_2_lo);
            c_9 += ul32_addc(&c_8, &c_8, &a_7__b_0_hi);
            c_9 += ul32_addc(&c_8, &c_8, &a_7__b_1_lo);
            c_9 += ul32_addc(&c_8, &c_8, &a_8__b_0_lo);
            
            /* Add the q_i*N's for i < 8 */
            const uint32_t q_0__N_8_lo = q_0__N_8;
            c_9 += ul32_addc(&c_8, &c_8, &q_0__N_8_lo);
            const uint32_t q_0__N_7_hi = q_0__N_7 >> 32;
            c_9 += ul32_addc(&c_8, &c_8, &q_0__N_7_hi);
            const uint32_t q_1__N_7_lo = q_1__N_7;
            c_9 += ul32_addc(&c_8, &c_8, &q_1__N_7_lo);
            const uint32_t q_1__N_6_hi = q_1__N_6 >> 32;
            c_9 += ul32_addc(&c_8, &c_8, &q_1__N_6_hi);
            const uint32_t q_2__N_6_lo = q_2__N_6;
            c_9 += ul32_addc(&c_8, &c_8, &q_2__N_6_lo);
            const uint32_t q_2__N_5_hi = q_2__N_5 >> 32;
            c_9 += ul32_addc(&c_8, &c_8, &q_2__N_5_hi);
            const uint32_t q_3__N_5_lo = q_3__N_5;
            c_9 += ul32_addc(&c_8, &c_8, &q_3__N_5_lo);
            const uint32_t q_3__N_4_hi = q_3__N_4 >> 32;
            c_9 += ul32_addc(&c_8, &c_8, &q_3__N_4_hi);
            const uint32_t q_4__N_4_lo = q_4__N_4;
            c_9 += ul32_addc(&c_8, &c_8, &q_4__N_4_lo);
            const uint32_t q_4__N_3_hi = q_4__N_3 >> 32;
            c_9 += ul32_addc(&c_8, &c_8, &q_4__N_3_hi);
            const uint32_t q_5__N_3_lo = q_5__N_3;
            c_9 += ul32_addc(&c_8, &c_8, &q_5__N_3_lo);
            const uint32_t q_5__N_2_hi = q_5__N_2 >> 32;
            c_9 += ul32_addc(&c_8, &c_8, &q_5__N_2_hi);
            const uint32_t q_6__N_2_lo = q_6__N_2;
            c_9 += ul32_addc(&c_8, &c_8, &q_6__N_2_lo);
            const uint32_t q_6__N_1_hi = q_6__N_1 >> 32;
            c_9 += ul32_addc(&c_8, &c_8, &q_6__N_1_hi);
            const uint32_t q_7__N_1_lo = q_7__N_1;
            c_9 += ul32_addc(&c_8, &c_8, &q_7__N_1_lo);
            const uint32_t q_7__N_0_hi = q_7__N_0 >> 32;
            c_9 += ul32_addc(&c_8, &c_8, &q_7__N_0_hi);
            
            /* Compute q_8 and add its product with N */
            q_8 = n->np * c_8;
            q_8__N_0 = ((uint64_t)q_8) * ((uint64_t)n->n->x[0]);
            q_8__N_1 = ((uint64_t)q_8) * ((uint64_t)n->n->x[1]);
            q_8__N_2 = ((uint64_t)q_8) * ((uint64_t)n->n->x[2]);
            q_8__N_3 = ((uint64_t)q_8) * ((uint64_t)n->n->x[3]);
            q_8__N_4 = ((uint64_t)q_8) * ((uint64_t)n->n->x[4]);
            q_8__N_5 = ((uint64_t)q_8) * ((uint64_t)n->n->x[5]);
            q_8__N_6 = ((uint64_t)q_8) * ((uint64_t)n->n->x[6]);
            q_8__N_7 = ((uint64_t)q_8) * ((uint64_t)n->n->x[7]);
            q_8__N_8 = ((uint64_t)q_8) * ((uint64_t)n->n->x[8]);
            q_8__N_9 = ((uint64_t)q_8) * ((uint64_t)n->n->x[9]);
            q_8__N_10 = ((uint64_t)q_8) * ((uint64_t)n->n->x[10]);
            const uint32_t q_8__N_0_lo = q_8__N_0;
            c_9 += ul32_addc(&c_8, &c_8, &q_8__N_0_lo);
        }
        
        /* Compute c_9 */
        {
            /* Add the product terms into c_9, accumulating carries in c_10 */
            c_10 += ul32_addc(&c_9, &c_9, &a_0__b_8_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_0__b_9_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_1__b_7_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_1__b_8_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_2__b_6_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_2__b_7_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_3__b_5_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_3__b_6_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_4__b_4_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_4__b_5_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_5__b_3_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_5__b_4_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_6__b_2_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_6__b_3_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_7__b_1_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_7__b_2_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_8__b_0_hi);
            c_10 += ul32_addc(&c_9, &c_9, &a_8__b_1_lo);
            c_10 += ul32_addc(&c_9, &c_9, &a_9__b_0_lo);
            
            /* Add the q_i*N's for i < 9 */
            const uint32_t q_0__N_9_lo = q_0__N_9;
            c_10 += ul32_addc(&c_9, &c_9, &q_0__N_9_lo);
            const uint32_t q_0__N_8_hi = q_0__N_8 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_0__N_8_hi);
            const uint32_t q_1__N_8_lo = q_1__N_8;
            c_10 += ul32_addc(&c_9, &c_9, &q_1__N_8_lo);
            const uint32_t q_1__N_7_hi = q_1__N_7 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_1__N_7_hi);
            const uint32_t q_2__N_7_lo = q_2__N_7;
            c_10 += ul32_addc(&c_9, &c_9, &q_2__N_7_lo);
            const uint32_t q_2__N_6_hi = q_2__N_6 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_2__N_6_hi);
            const uint32_t q_3__N_6_lo = q_3__N_6;
            c_10 += ul32_addc(&c_9, &c_9, &q_3__N_6_lo);
            const uint32_t q_3__N_5_hi = q_3__N_5 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_3__N_5_hi);
            const uint32_t q_4__N_5_lo = q_4__N_5;
            c_10 += ul32_addc(&c_9, &c_9, &q_4__N_5_lo);
            const uint32_t q_4__N_4_hi = q_4__N_4 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_4__N_4_hi);
            const uint32_t q_5__N_4_lo = q_5__N_4;
            c_10 += ul32_addc(&c_9, &c_9, &q_5__N_4_lo);
            const uint32_t q_5__N_3_hi = q_5__N_3 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_5__N_3_hi);
            const uint32_t q_6__N_3_lo = q_6__N_3;
            c_10 += ul32_addc(&c_9, &c_9, &q_6__N_3_lo);
            const uint32_t q_6__N_2_hi = q_6__N_2 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_6__N_2_hi);
            const uint32_t q_7__N_2_lo = q_7__N_2;
            c_10 += ul32_addc(&c_9, &c_9, &q_7__N_2_lo);
            const uint32_t q_7__N_1_hi = q_7__N_1 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_7__N_1_hi);
            const uint32_t q_8__N_1_lo = q_8__N_1;
            c_10 += ul32_addc(&c_9, &c_9, &q_8__N_1_lo);
            const uint32_t q_8__N_0_hi = q_8__N_0 >> 32;
            c_10 += ul32_addc(&c_9, &c_9, &q_8__N_0_hi);
            
            /* Compute q_9 and add its product with N */
            q_9 = n->np * c_9;
            q_9__N_0 = ((uint64_t)q_9) * ((uint64_t)n->n->x[0]);
            q_9__N_1 = ((uint64_t)q_9) * ((uint64_t)n->n->x[1]);
            q_9__N_2 = ((uint64_t)q_9) * ((uint64_t)n->n->x[2]);
            q_9__N_3 = ((uint64_t)q_9) * ((uint64_t)n->n->x[3]);
            q_9__N_4 = ((uint64_t)q_9) * ((uint64_t)n->n->x[4]);
            q_9__N_5 = ((uint64_t)q_9) * ((uint64_t)n->n->x[5]);
            q_9__N_6 = ((uint64_t)q_9) * ((uint64_t)n->n->x[6]);
            q_9__N_7 = ((uint64_t)q_9) * ((uint64_t)n->n->x[7]);
            q_9__N_8 = ((uint64_t)q_9) * ((uint64_t)n->n->x[8]);
            q_9__N_9 = ((uint64_t)q_9) * ((uint64_t)n->n->x[9]);
            q_9__N_10 = ((uint64_t)q_9) * ((uint64_t)n->n->x[10]);
            const uint32_t q_9__N_0_lo = q_9__N_0;
            c_10 += ul32_addc(&c_9, &c_9, &q_9__N_0_lo);
        }
        
        /* Compute c_10 */
        {
            /* Add the product terms into c_10, accumulating carries in c_11 */
            c_11 += ul32_addc(&c_10, &c_10, &a_0__b_9_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_0__b_10_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_1__b_8_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_1__b_9_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_2__b_7_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_2__b_8_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_3__b_6_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_3__b_7_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_4__b_5_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_4__b_6_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_5__b_4_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_5__b_5_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_6__b_3_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_6__b_4_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_7__b_2_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_7__b_3_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_8__b_1_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_8__b_2_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_9__b_0_hi);
            c_11 += ul32_addc(&c_10, &c_10, &a_9__b_1_lo);
            c_11 += ul32_addc(&c_10, &c_10, &a_10__b_0_lo);
            
            /* Add the q_i*N's for i < 10 */
            const uint32_t q_0__N_10_lo = q_0__N_10;
            c_11 += ul32_addc(&c_10, &c_10, &q_0__N_10_lo);
            const uint32_t q_0__N_9_hi = q_0__N_9 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_0__N_9_hi);
            const uint32_t q_1__N_9_lo = q_1__N_9;
            c_11 += ul32_addc(&c_10, &c_10, &q_1__N_9_lo);
            const uint32_t q_1__N_8_hi = q_1__N_8 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_1__N_8_hi);
            const uint32_t q_2__N_8_lo = q_2__N_8;
            c_11 += ul32_addc(&c_10, &c_10, &q_2__N_8_lo);
            const uint32_t q_2__N_7_hi = q_2__N_7 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_2__N_7_hi);
            const uint32_t q_3__N_7_lo = q_3__N_7;
            c_11 += ul32_addc(&c_10, &c_10, &q_3__N_7_lo);
            const uint32_t q_3__N_6_hi = q_3__N_6 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_3__N_6_hi);
            const uint32_t q_4__N_6_lo = q_4__N_6;
            c_11 += ul32_addc(&c_10, &c_10, &q_4__N_6_lo);
            const uint32_t q_4__N_5_hi = q_4__N_5 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_4__N_5_hi);
            const uint32_t q_5__N_5_lo = q_5__N_5;
            c_11 += ul32_addc(&c_10, &c_10, &q_5__N_5_lo);
            const uint32_t q_5__N_4_hi = q_5__N_4 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_5__N_4_hi);
            const uint32_t q_6__N_4_lo = q_6__N_4;
            c_11 += ul32_addc(&c_10, &c_10, &q_6__N_4_lo);
            const uint32_t q_6__N_3_hi = q_6__N_3 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_6__N_3_hi);
            const uint32_t q_7__N_3_lo = q_7__N_3;
            c_11 += ul32_addc(&c_10, &c_10, &q_7__N_3_lo);
            const uint32_t q_7__N_2_hi = q_7__N_2 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_7__N_2_hi);
            const uint32_t q_8__N_2_lo = q_8__N_2;
            c_11 += ul32_addc(&c_10, &c_10, &q_8__N_2_lo);
            const uint32_t q_8__N_1_hi = q_8__N_1 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_8__N_1_hi);
            const uint32_t q_9__N_1_lo = q_9__N_1;
            c_11 += ul32_addc(&c_10, &c_10, &q_9__N_1_lo);
            const uint32_t q_9__N_0_hi = q_9__N_0 >> 32;
            c_11 += ul32_addc(&c_10, &c_10, &q_9__N_0_hi);
            
            /* Compute q_10 and add its product with N */
            q_10 = n->np * c_10;
            q_10__N_0 = ((uint64_t)q_10) * ((uint64_t)n->n->x[0]);
            q_10__N_1 = ((uint64_t)q_10) * ((uint64_t)n->n->x[1]);
            q_10__N_2 = ((uint64_t)q_10) * ((uint64_t)n->n->x[2]);
            q_10__N_3 = ((uint64_t)q_10) * ((uint64_t)n->n->x[3]);
            q_10__N_4 = ((uint64_t)q_10) * ((uint64_t)n->n->x[4]);
            q_10__N_5 = ((uint64_t)q_10) * ((uint64_t)n->n->x[5]);
            q_10__N_6 = ((uint64_t)q_10) * ((uint64_t)n->n->x[6]);
            q_10__N_7 = ((uint64_t)q_10) * ((uint64_t)n->n->x[7]);
            q_10__N_8 = ((uint64_t)q_10) * ((uint64_t)n->n->x[8]);
            q_10__N_9 = ((uint64_t)q_10) * ((uint64_t)n->n->x[9]);
            q_10__N_10 = ((uint64_t)q_10) * ((uint64_t)n->n->x[10]);
            const uint32_t q_10__N_0_lo = q_10__N_0;
            c_11 += ul32_addc(&c_10, &c_10, &q_10__N_0_lo);
        }
        
        /* Compute c_11 */
        {
            /* Add the product terms into c_11, accumulating carries in c_12 */
            c_12 += ul32_addc(&c_11, &c_11, &a_0__b_10_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_1__b_9_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_1__b_10_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_2__b_8_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_2__b_9_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_3__b_7_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_3__b_8_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_4__b_6_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_4__b_7_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_5__b_5_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_5__b_6_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_6__b_4_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_6__b_5_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_7__b_3_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_7__b_4_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_8__b_2_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_8__b_3_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_9__b_1_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_9__b_2_lo);
            c_12 += ul32_addc(&c_11, &c_11, &a_10__b_0_hi);
            c_12 += ul32_addc(&c_11, &c_11, &a_10__b_1_lo);
            
            /* Add the q_i*N's for i < 11 */
            const uint32_t q_0__N_10_hi = q_0__N_10 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_0__N_10_hi);
            const uint32_t q_1__N_10_lo = q_1__N_10;
            c_12 += ul32_addc(&c_11, &c_11, &q_1__N_10_lo);
            const uint32_t q_1__N_9_hi = q_1__N_9 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_1__N_9_hi);
            const uint32_t q_2__N_9_lo = q_2__N_9;
            c_12 += ul32_addc(&c_11, &c_11, &q_2__N_9_lo);
            const uint32_t q_2__N_8_hi = q_2__N_8 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_2__N_8_hi);
            const uint32_t q_3__N_8_lo = q_3__N_8;
            c_12 += ul32_addc(&c_11, &c_11, &q_3__N_8_lo);
            const uint32_t q_3__N_7_hi = q_3__N_7 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_3__N_7_hi);
            const uint32_t q_4__N_7_lo = q_4__N_7;
            c_12 += ul32_addc(&c_11, &c_11, &q_4__N_7_lo);
            const uint32_t q_4__N_6_hi = q_4__N_6 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_4__N_6_hi);
            const uint32_t q_5__N_6_lo = q_5__N_6;
            c_12 += ul32_addc(&c_11, &c_11, &q_5__N_6_lo);
            const uint32_t q_5__N_5_hi = q_5__N_5 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_5__N_5_hi);
            const uint32_t q_6__N_5_lo = q_6__N_5;
            c_12 += ul32_addc(&c_11, &c_11, &q_6__N_5_lo);
            const uint32_t q_6__N_4_hi = q_6__N_4 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_6__N_4_hi);
            const uint32_t q_7__N_4_lo = q_7__N_4;
            c_12 += ul32_addc(&c_11, &c_11, &q_7__N_4_lo);
            const uint32_t q_7__N_3_hi = q_7__N_3 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_7__N_3_hi);
            const uint32_t q_8__N_3_lo = q_8__N_3;
            c_12 += ul32_addc(&c_11, &c_11, &q_8__N_3_lo);
            const uint32_t q_8__N_2_hi = q_8__N_2 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_8__N_2_hi);
            const uint32_t q_9__N_2_lo = q_9__N_2;
            c_12 += ul32_addc(&c_11, &c_11, &q_9__N_2_lo);
            const uint32_t q_9__N_1_hi = q_9__N_1 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_9__N_1_hi);
            const uint32_t q_10__N_1_lo = q_10__N_1;
            c_12 += ul32_addc(&c_11, &c_11, &q_10__N_1_lo);
            const uint32_t q_10__N_0_hi = q_10__N_0 >> 32;
            c_12 += ul32_addc(&c_11, &c_11, &q_10__N_0_hi);
            
        }
        
        /* Compute c_12 */
        {
            /* Add the product terms into c_12, accumulating carries in c_13 */
            c_13 += ul32_addc(&c_12, &c_12, &a_1__b_10_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_2__b_9_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_2__b_10_lo);
            c_13 += ul32_addc(&c_12, &c_12, &a_3__b_8_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_3__b_9_lo);
            c_13 += ul32_addc(&c_12, &c_12, &a_4__b_7_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_4__b_8_lo);
            c_13 += ul32_addc(&c_12, &c_12, &a_5__b_6_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_5__b_7_lo);
            c_13 += ul32_addc(&c_12, &c_12, &a_6__b_5_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_6__b_6_lo);
            c_13 += ul32_addc(&c_12, &c_12, &a_7__b_4_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_7__b_5_lo);
            c_13 += ul32_addc(&c_12, &c_12, &a_8__b_3_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_8__b_4_lo);
            c_13 += ul32_addc(&c_12, &c_12, &a_9__b_2_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_9__b_3_lo);
            c_13 += ul32_addc(&c_12, &c_12, &a_10__b_1_hi);
            c_13 += ul32_addc(&c_12, &c_12, &a_10__b_2_lo);
            
            /* Add the q_i*N's for i < 12 */
            const uint32_t q_1__N_10_hi = q_1__N_10 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_1__N_10_hi);
            const uint32_t q_2__N_10_lo = q_2__N_10;
            c_13 += ul32_addc(&c_12, &c_12, &q_2__N_10_lo);
            const uint32_t q_2__N_9_hi = q_2__N_9 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_2__N_9_hi);
            const uint32_t q_3__N_9_lo = q_3__N_9;
            c_13 += ul32_addc(&c_12, &c_12, &q_3__N_9_lo);
            const uint32_t q_3__N_8_hi = q_3__N_8 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_3__N_8_hi);
            const uint32_t q_4__N_8_lo = q_4__N_8;
            c_13 += ul32_addc(&c_12, &c_12, &q_4__N_8_lo);
            const uint32_t q_4__N_7_hi = q_4__N_7 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_4__N_7_hi);
            const uint32_t q_5__N_7_lo = q_5__N_7;
            c_13 += ul32_addc(&c_12, &c_12, &q_5__N_7_lo);
            const uint32_t q_5__N_6_hi = q_5__N_6 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_5__N_6_hi);
            const uint32_t q_6__N_6_lo = q_6__N_6;
            c_13 += ul32_addc(&c_12, &c_12, &q_6__N_6_lo);
            const uint32_t q_6__N_5_hi = q_6__N_5 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_6__N_5_hi);
            const uint32_t q_7__N_5_lo = q_7__N_5;
            c_13 += ul32_addc(&c_12, &c_12, &q_7__N_5_lo);
            const uint32_t q_7__N_4_hi = q_7__N_4 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_7__N_4_hi);
            const uint32_t q_8__N_4_lo = q_8__N_4;
            c_13 += ul32_addc(&c_12, &c_12, &q_8__N_4_lo);
            const uint32_t q_8__N_3_hi = q_8__N_3 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_8__N_3_hi);
            const uint32_t q_9__N_3_lo = q_9__N_3;
            c_13 += ul32_addc(&c_12, &c_12, &q_9__N_3_lo);
            const uint32_t q_9__N_2_hi = q_9__N_2 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_9__N_2_hi);
            const uint32_t q_10__N_2_lo = q_10__N_2;
            c_13 += ul32_addc(&c_12, &c_12, &q_10__N_2_lo);
            const uint32_t q_10__N_1_hi = q_10__N_1 >> 32;
            c_13 += ul32_addc(&c_12, &c_12, &q_10__N_1_hi);
            
        }
        
        /* Compute c_13 */
        {
            /* Add the product terms into c_13, accumulating carries in c_14 */
            c_14 += ul32_addc(&c_13, &c_13, &a_2__b_10_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_3__b_9_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_3__b_10_lo);
            c_14 += ul32_addc(&c_13, &c_13, &a_4__b_8_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_4__b_9_lo);
            c_14 += ul32_addc(&c_13, &c_13, &a_5__b_7_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_5__b_8_lo);
            c_14 += ul32_addc(&c_13, &c_13, &a_6__b_6_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_6__b_7_lo);
            c_14 += ul32_addc(&c_13, &c_13, &a_7__b_5_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_7__b_6_lo);
            c_14 += ul32_addc(&c_13, &c_13, &a_8__b_4_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_8__b_5_lo);
            c_14 += ul32_addc(&c_13, &c_13, &a_9__b_3_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_9__b_4_lo);
            c_14 += ul32_addc(&c_13, &c_13, &a_10__b_2_hi);
            c_14 += ul32_addc(&c_13, &c_13, &a_10__b_3_lo);
            
            /* Add the q_i*N's for i < 13 */
            const uint32_t q_2__N_10_hi = q_2__N_10 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_2__N_10_hi);
            const uint32_t q_3__N_10_lo = q_3__N_10;
            c_14 += ul32_addc(&c_13, &c_13, &q_3__N_10_lo);
            const uint32_t q_3__N_9_hi = q_3__N_9 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_3__N_9_hi);
            const uint32_t q_4__N_9_lo = q_4__N_9;
            c_14 += ul32_addc(&c_13, &c_13, &q_4__N_9_lo);
            const uint32_t q_4__N_8_hi = q_4__N_8 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_4__N_8_hi);
            const uint32_t q_5__N_8_lo = q_5__N_8;
            c_14 += ul32_addc(&c_13, &c_13, &q_5__N_8_lo);
            const uint32_t q_5__N_7_hi = q_5__N_7 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_5__N_7_hi);
            const uint32_t q_6__N_7_lo = q_6__N_7;
            c_14 += ul32_addc(&c_13, &c_13, &q_6__N_7_lo);
            const uint32_t q_6__N_6_hi = q_6__N_6 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_6__N_6_hi);
            const uint32_t q_7__N_6_lo = q_7__N_6;
            c_14 += ul32_addc(&c_13, &c_13, &q_7__N_6_lo);
            const uint32_t q_7__N_5_hi = q_7__N_5 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_7__N_5_hi);
            const uint32_t q_8__N_5_lo = q_8__N_5;
            c_14 += ul32_addc(&c_13, &c_13, &q_8__N_5_lo);
            const uint32_t q_8__N_4_hi = q_8__N_4 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_8__N_4_hi);
            const uint32_t q_9__N_4_lo = q_9__N_4;
            c_14 += ul32_addc(&c_13, &c_13, &q_9__N_4_lo);
            const uint32_t q_9__N_3_hi = q_9__N_3 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_9__N_3_hi);
            const uint32_t q_10__N_3_lo = q_10__N_3;
            c_14 += ul32_addc(&c_13, &c_13, &q_10__N_3_lo);
            const uint32_t q_10__N_2_hi = q_10__N_2 >> 32;
            c_14 += ul32_addc(&c_13, &c_13, &q_10__N_2_hi);
            
        }
        
        /* Compute c_14 */
        {
            /* Add the product terms into c_14, accumulating carries in c_15 */
            c_15 += ul32_addc(&c_14, &c_14, &a_3__b_10_hi);
            c_15 += ul32_addc(&c_14, &c_14, &a_4__b_9_hi);
            c_15 += ul32_addc(&c_14, &c_14, &a_4__b_10_lo);
            c_15 += ul32_addc(&c_14, &c_14, &a_5__b_8_hi);
            c_15 += ul32_addc(&c_14, &c_14, &a_5__b_9_lo);
            c_15 += ul32_addc(&c_14, &c_14, &a_6__b_7_hi);
            c_15 += ul32_addc(&c_14, &c_14, &a_6__b_8_lo);
            c_15 += ul32_addc(&c_14, &c_14, &a_7__b_6_hi);
            c_15 += ul32_addc(&c_14, &c_14, &a_7__b_7_lo);
            c_15 += ul32_addc(&c_14, &c_14, &a_8__b_5_hi);
            c_15 += ul32_addc(&c_14, &c_14, &a_8__b_6_lo);
            c_15 += ul32_addc(&c_14, &c_14, &a_9__b_4_hi);
            c_15 += ul32_addc(&c_14, &c_14, &a_9__b_5_lo);
            c_15 += ul32_addc(&c_14, &c_14, &a_10__b_3_hi);
            c_15 += ul32_addc(&c_14, &c_14, &a_10__b_4_lo);
            
            /* Add the q_i*N's for i < 14 */
            const uint32_t q_3__N_10_hi = q_3__N_10 >> 32;
            c_15 += ul32_addc(&c_14, &c_14, &q_3__N_10_hi);
            const uint32_t q_4__N_10_lo = q_4__N_10;
            c_15 += ul32_addc(&c_14, &c_14, &q_4__N_10_lo);
            const uint32_t q_4__N_9_hi = q_4__N_9 >> 32;
            c_15 += ul32_addc(&c_14, &c_14, &q_4__N_9_hi);
            const uint32_t q_5__N_9_lo = q_5__N_9;
            c_15 += ul32_addc(&c_14, &c_14, &q_5__N_9_lo);
            const uint32_t q_5__N_8_hi = q_5__N_8 >> 32;
            c_15 += ul32_addc(&c_14, &c_14, &q_5__N_8_hi);
            const uint32_t q_6__N_8_lo = q_6__N_8;
            c_15 += ul32_addc(&c_14, &c_14, &q_6__N_8_lo);
            const uint32_t q_6__N_7_hi = q_6__N_7 >> 32;
            c_15 += ul32_addc(&c_14, &c_14, &q_6__N_7_hi);
            const uint32_t q_7__N_7_lo = q_7__N_7;
            c_15 += ul32_addc(&c_14, &c_14, &q_7__N_7_lo);
            const uint32_t q_7__N_6_hi = q_7__N_6 >> 32;
            c_15 += ul32_addc(&c_14, &c_14, &q_7__N_6_hi);
            const uint32_t q_8__N_6_lo = q_8__N_6;
            c_15 += ul32_addc(&c_14, &c_14, &q_8__N_6_lo);
            const uint32_t q_8__N_5_hi = q_8__N_5 >> 32;
            c_15 += ul32_addc(&c_14, &c_14, &q_8__N_5_hi);
            const uint32_t q_9__N_5_lo = q_9__N_5;
            c_15 += ul32_addc(&c_14, &c_14, &q_9__N_5_lo);
            const uint32_t q_9__N_4_hi = q_9__N_4 >> 32;
            c_15 += ul32_addc(&c_14, &c_14, &q_9__N_4_hi);
            const uint32_t q_10__N_4_lo = q_10__N_4;
            c_15 += ul32_addc(&c_14, &c_14, &q_10__N_4_lo);
            const uint32_t q_10__N_3_hi = q_10__N_3 >> 32;
            c_15 += ul32_addc(&c_14, &c_14, &q_10__N_3_hi);
            
        }
        
        /* Compute c_15 */
        {
            /* Add the product terms into c_15, accumulating carries in c_16 */
            c_16 += ul32_addc(&c_15, &c_15, &a_4__b_10_hi);
            c_16 += ul32_addc(&c_15, &c_15, &a_5__b_9_hi);
            c_16 += ul32_addc(&c_15, &c_15, &a_5__b_10_lo);
            c_16 += ul32_addc(&c_15, &c_15, &a_6__b_8_hi);
            c_16 += ul32_addc(&c_15, &c_15, &a_6__b_9_lo);
            c_16 += ul32_addc(&c_15, &c_15, &a_7__b_7_hi);
            c_16 += ul32_addc(&c_15, &c_15, &a_7__b_8_lo);
            c_16 += ul32_addc(&c_15, &c_15, &a_8__b_6_hi);
            c_16 += ul32_addc(&c_15, &c_15, &a_8__b_7_lo);
            c_16 += ul32_addc(&c_15, &c_15, &a_9__b_5_hi);
            c_16 += ul32_addc(&c_15, &c_15, &a_9__b_6_lo);
            c_16 += ul32_addc(&c_15, &c_15, &a_10__b_4_hi);
            c_16 += ul32_addc(&c_15, &c_15, &a_10__b_5_lo);
            
            /* Add the q_i*N's for i < 15 */
            const uint32_t q_4__N_10_hi = q_4__N_10 >> 32;
            c_16 += ul32_addc(&c_15, &c_15, &q_4__N_10_hi);
            const uint32_t q_5__N_10_lo = q_5__N_10;
            c_16 += ul32_addc(&c_15, &c_15, &q_5__N_10_lo);
            const uint32_t q_5__N_9_hi = q_5__N_9 >> 32;
            c_16 += ul32_addc(&c_15, &c_15, &q_5__N_9_hi);
            const uint32_t q_6__N_9_lo = q_6__N_9;
            c_16 += ul32_addc(&c_15, &c_15, &q_6__N_9_lo);
            const uint32_t q_6__N_8_hi = q_6__N_8 >> 32;
            c_16 += ul32_addc(&c_15, &c_15, &q_6__N_8_hi);
            const uint32_t q_7__N_8_lo = q_7__N_8;
            c_16 += ul32_addc(&c_15, &c_15, &q_7__N_8_lo);
            const uint32_t q_7__N_7_hi = q_7__N_7 >> 32;
            c_16 += ul32_addc(&c_15, &c_15, &q_7__N_7_hi);
            const uint32_t q_8__N_7_lo = q_8__N_7;
            c_16 += ul32_addc(&c_15, &c_15, &q_8__N_7_lo);
            const uint32_t q_8__N_6_hi = q_8__N_6 >> 32;
            c_16 += ul32_addc(&c_15, &c_15, &q_8__N_6_hi);
            const uint32_t q_9__N_6_lo = q_9__N_6;
            c_16 += ul32_addc(&c_15, &c_15, &q_9__N_6_lo);
            const uint32_t q_9__N_5_hi = q_9__N_5 >> 32;
            c_16 += ul32_addc(&c_15, &c_15, &q_9__N_5_hi);
            const uint32_t q_10__N_5_lo = q_10__N_5;
            c_16 += ul32_addc(&c_15, &c_15, &q_10__N_5_lo);
            const uint32_t q_10__N_4_hi = q_10__N_4 >> 32;
            c_16 += ul32_addc(&c_15, &c_15, &q_10__N_4_hi);
            
        }
        
        /* Compute c_16 */
        {
            /* Add the product terms into c_16, accumulating carries in c_17 */
            c_17 += ul32_addc(&c_16, &c_16, &a_5__b_10_hi);
            c_17 += ul32_addc(&c_16, &c_16, &a_6__b_9_hi);
            c_17 += ul32_addc(&c_16, &c_16, &a_6__b_10_lo);
            c_17 += ul32_addc(&c_16, &c_16, &a_7__b_8_hi);
            c_17 += ul32_addc(&c_16, &c_16, &a_7__b_9_lo);
            c_17 += ul32_addc(&c_16, &c_16, &a_8__b_7_hi);
            c_17 += ul32_addc(&c_16, &c_16, &a_8__b_8_lo);
            c_17 += ul32_addc(&c_16, &c_16, &a_9__b_6_hi);
            c_17 += ul32_addc(&c_16, &c_16, &a_9__b_7_lo);
            c_17 += ul32_addc(&c_16, &c_16, &a_10__b_5_hi);
            c_17 += ul32_addc(&c_16, &c_16, &a_10__b_6_lo);
            
            /* Add the q_i*N's for i < 16 */
            const uint32_t q_5__N_10_hi = q_5__N_10 >> 32;
            c_17 += ul32_addc(&c_16, &c_16, &q_5__N_10_hi);
            const uint32_t q_6__N_10_lo = q_6__N_10;
            c_17 += ul32_addc(&c_16, &c_16, &q_6__N_10_lo);
            const uint32_t q_6__N_9_hi = q_6__N_9 >> 32;
            c_17 += ul32_addc(&c_16, &c_16, &q_6__N_9_hi);
            const uint32_t q_7__N_9_lo = q_7__N_9;
            c_17 += ul32_addc(&c_16, &c_16, &q_7__N_9_lo);
            const uint32_t q_7__N_8_hi = q_7__N_8 >> 32;
            c_17 += ul32_addc(&c_16, &c_16, &q_7__N_8_hi);
            const uint32_t q_8__N_8_lo = q_8__N_8;
            c_17 += ul32_addc(&c_16, &c_16, &q_8__N_8_lo);
            const uint32_t q_8__N_7_hi = q_8__N_7 >> 32;
            c_17 += ul32_addc(&c_16, &c_16, &q_8__N_7_hi);
            const uint32_t q_9__N_7_lo = q_9__N_7;
            c_17 += ul32_addc(&c_16, &c_16, &q_9__N_7_lo);
            const uint32_t q_9__N_6_hi = q_9__N_6 >> 32;
            c_17 += ul32_addc(&c_16, &c_16, &q_9__N_6_hi);
            const uint32_t q_10__N_6_lo = q_10__N_6;
            c_17 += ul32_addc(&c_16, &c_16, &q_10__N_6_lo);
            const uint32_t q_10__N_5_hi = q_10__N_5 >> 32;
            c_17 += ul32_addc(&c_16, &c_16, &q_10__N_5_hi);
            
        }
        
        /* Compute c_17 */
        {
            /* Add the product terms into c_17, accumulating carries in c_18 */
            c_18 += ul32_addc(&c_17, &c_17, &a_6__b_10_hi);
            c_18 += ul32_addc(&c_17, &c_17, &a_7__b_9_hi);
            c_18 += ul32_addc(&c_17, &c_17, &a_7__b_10_lo);
            c_18 += ul32_addc(&c_17, &c_17, &a_8__b_8_hi);
            c_18 += ul32_addc(&c_17, &c_17, &a_8__b_9_lo);
            c_18 += ul32_addc(&c_17, &c_17, &a_9__b_7_hi);
            c_18 += ul32_addc(&c_17, &c_17, &a_9__b_8_lo);
            c_18 += ul32_addc(&c_17, &c_17, &a_10__b_6_hi);
            c_18 += ul32_addc(&c_17, &c_17, &a_10__b_7_lo);
            
            /* Add the q_i*N's for i < 17 */
            const uint32_t q_6__N_10_hi = q_6__N_10 >> 32;
            c_18 += ul32_addc(&c_17, &c_17, &q_6__N_10_hi);
            const uint32_t q_7__N_10_lo = q_7__N_10;
            c_18 += ul32_addc(&c_17, &c_17, &q_7__N_10_lo);
            const uint32_t q_7__N_9_hi = q_7__N_9 >> 32;
            c_18 += ul32_addc(&c_17, &c_17, &q_7__N_9_hi);
            const uint32_t q_8__N_9_lo = q_8__N_9;
            c_18 += ul32_addc(&c_17, &c_17, &q_8__N_9_lo);
            const uint32_t q_8__N_8_hi = q_8__N_8 >> 32;
            c_18 += ul32_addc(&c_17, &c_17, &q_8__N_8_hi);
            const uint32_t q_9__N_8_lo = q_9__N_8;
            c_18 += ul32_addc(&c_17, &c_17, &q_9__N_8_lo);
            const uint32_t q_9__N_7_hi = q_9__N_7 >> 32;
            c_18 += ul32_addc(&c_17, &c_17, &q_9__N_7_hi);
            const uint32_t q_10__N_7_lo = q_10__N_7;
            c_18 += ul32_addc(&c_17, &c_17, &q_10__N_7_lo);
            const uint32_t q_10__N_6_hi = q_10__N_6 >> 32;
            c_18 += ul32_addc(&c_17, &c_17, &q_10__N_6_hi);
            
        }
        
        /* Compute c_18 */
        {
            /* Add the product terms into c_18, accumulating carries in c_19 */
            c_19 += ul32_addc(&c_18, &c_18, &a_7__b_10_hi);
            c_19 += ul32_addc(&c_18, &c_18, &a_8__b_9_hi);
            c_19 += ul32_addc(&c_18, &c_18, &a_8__b_10_lo);
            c_19 += ul32_addc(&c_18, &c_18, &a_9__b_8_hi);
            c_19 += ul32_addc(&c_18, &c_18, &a_9__b_9_lo);
            c_19 += ul32_addc(&c_18, &c_18, &a_10__b_7_hi);
            c_19 += ul32_addc(&c_18, &c_18, &a_10__b_8_lo);
            
            /* Add the q_i*N's for i < 18 */
            const uint32_t q_7__N_10_hi = q_7__N_10 >> 32;
            c_19 += ul32_addc(&c_18, &c_18, &q_7__N_10_hi);
            const uint32_t q_8__N_10_lo = q_8__N_10;
            c_19 += ul32_addc(&c_18, &c_18, &q_8__N_10_lo);
            const uint32_t q_8__N_9_hi = q_8__N_9 >> 32;
            c_19 += ul32_addc(&c_18, &c_18, &q_8__N_9_hi);
            const uint32_t q_9__N_9_lo = q_9__N_9;
            c_19 += ul32_addc(&c_18, &c_18, &q_9__N_9_lo);
            const uint32_t q_9__N_8_hi = q_9__N_8 >> 32;
            c_19 += ul32_addc(&c_18, &c_18, &q_9__N_8_hi);
            const uint32_t q_10__N_8_lo = q_10__N_8;
            c_19 += ul32_addc(&c_18, &c_18, &q_10__N_8_lo);
            const uint32_t q_10__N_7_hi = q_10__N_7 >> 32;
            c_19 += ul32_addc(&c_18, &c_18, &q_10__N_7_hi);
            
        }
        
        /* Compute c_19 */
        {
            /* Add the product terms into c_19, accumulating carries in c_20 */
            c_20 += ul32_addc(&c_19, &c_19, &a_8__b_10_hi);
            c_20 += ul32_addc(&c_19, &c_19, &a_9__b_9_hi);
            c_20 += ul32_addc(&c_19, &c_19, &a_9__b_10_lo);
            c_20 += ul32_addc(&c_19, &c_19, &a_10__b_8_hi);
            c_20 += ul32_addc(&c_19, &c_19, &a_10__b_9_lo);
            
            /* Add the q_i*N's for i < 19 */
            const uint32_t q_8__N_10_hi = q_8__N_10 >> 32;
            c_20 += ul32_addc(&c_19, &c_19, &q_8__N_10_hi);
            const uint32_t q_9__N_10_lo = q_9__N_10;
            c_20 += ul32_addc(&c_19, &c_19, &q_9__N_10_lo);
            const uint32_t q_9__N_9_hi = q_9__N_9 >> 32;
            c_20 += ul32_addc(&c_19, &c_19, &q_9__N_9_hi);
            const uint32_t q_10__N_9_lo = q_10__N_9;
            c_20 += ul32_addc(&c_19, &c_19, &q_10__N_9_lo);
            const uint32_t q_10__N_8_hi = q_10__N_8 >> 32;
            c_20 += ul32_addc(&c_19, &c_19, &q_10__N_8_hi);
            
        }
        
        /* Compute c_20 */
        {
            /* Add the product terms into c_20, accumulating carries in c_21 */
            c_21 += ul32_addc(&c_20, &c_20, &a_9__b_10_hi);
            c_21 += ul32_addc(&c_20, &c_20, &a_10__b_9_hi);
            c_21 += ul32_addc(&c_20, &c_20, &a_10__b_10_lo);
            
            /* Add the q_i*N's for i < 20 */
            const uint32_t q_9__N_10_hi = q_9__N_10 >> 32;
            c_21 += ul32_addc(&c_20, &c_20, &q_9__N_10_hi);
            const uint32_t q_10__N_10_lo = q_10__N_10;
            c_21 += ul32_addc(&c_20, &c_20, &q_10__N_10_lo);
            const uint32_t q_10__N_9_hi = q_10__N_9 >> 32;
            c_21 += ul32_addc(&c_20, &c_20, &q_10__N_9_hi);
            
        }
        
        /* Compute c_21 */
        {
            /* Add the product terms into c_21, accumulating carries in c_22 */
            c_22 += ul32_addc(&c_21, &c_21, &a_10__b_10_hi);
            
            /* Add the q_i*N's for i < 21 */
            const uint32_t q_10__N_10_hi = q_10__N_10 >> 32;
            c_22 += ul32_addc(&c_21, &c_21, &q_10__N_10_hi);
            
        }
        
        /* R = C * beta^{-n} */
        _dst->x[0] = c_11;
        _dst->x[1] = c_12;
        _dst->x[2] = c_13;
        _dst->x[3] = c_14;
        _dst->x[4] = c_15;
        _dst->x[5] = c_16;
        _dst->x[6] = c_17;
        _dst->x[7] = c_18;
        _dst->x[8] = c_19;
        _dst->x[9] = c_20;
        _dst->x[10] = c_21;
        
        /* Reduce as needed */
        if (c_22 || (ul352_cmp(_dst, n->n) >= 0))
            ul352_sub(_dst, _dst, n->n);
    #endif
}

/*
 * Convert a ul352 into Montgomery form
 */
inline void ul352_to_montgomery(ul352 dst, ul352 src, mod352 mod) {
    ul352_modmul(dst, src, mod->rsq, mod);
}

/*
 * Convert a ul352 out-of Montgomery form
 */
inline void ul352_from_montgomery(ul352 dst, ul352 src, mod352 mod) {
    ul352 one = {{{0}}};
    one->x[0] = 1;
    
    ul352_modmul(dst, src, one, mod);
}




/*
 * Right-shift a ul352 by some number of bits
 */
inline void ul352_rshift(ul352 dst, ul352 src, int shift) {
dst->x[0] = (src->x[0] >> shift) | (src->x[1] << (32 - shift));
dst->x[1] = (src->x[1] >> shift) | (src->x[2] << (32 - shift));
dst->x[2] = (src->x[2] >> shift) | (src->x[3] << (32 - shift));
dst->x[3] = (src->x[3] >> shift) | (src->x[4] << (32 - shift));
dst->x[4] = (src->x[4] >> shift) | (src->x[5] << (32 - shift));
dst->x[5] = (src->x[5] >> shift) | (src->x[6] << (32 - shift));
dst->x[6] = (src->x[6] >> shift) | (src->x[7] << (32 - shift));
dst->x[7] = (src->x[7] >> shift) | (src->x[8] << (32 - shift));
dst->x[8] = (src->x[8] >> shift) | (src->x[9] << (32 - shift));
dst->x[9] = (src->x[9] >> shift) | (src->x[10] << (32 - shift));
dst->x[10] = dst->x[10] >> shift;
}



/*
 * Left shift a ul352 by some number of words
 */
inline void ul352_lshiftw(ul352 dst, ul352 src, int w) {
    dst->x[10] = ((10-w) >= 0) ? src->x[10-w] : 0;
    dst->x[9] = ((9-w) >= 0) ? src->x[9-w] : 0;
    dst->x[8] = ((8-w) >= 0) ? src->x[8-w] : 0;
    dst->x[7] = ((7-w) >= 0) ? src->x[7-w] : 0;
    dst->x[6] = ((6-w) >= 0) ? src->x[6-w] : 0;
    dst->x[5] = ((5-w) >= 0) ? src->x[5-w] : 0;
    dst->x[4] = ((4-w) >= 0) ? src->x[4-w] : 0;
    dst->x[3] = ((3-w) >= 0) ? src->x[3-w] : 0;
    dst->x[2] = ((2-w) >= 0) ? src->x[2-w] : 0;
    dst->x[1] = ((1-w) >= 0) ? src->x[1-w] : 0;
    dst->x[0] = ((0-w) >= 0) ? src->x[0-w] : 0;
}

/*
 * Multiply a ul352 by a uint32_t
 */
inline void ul352_mulu32(ul352 dst, ul352 src, uint32_t x) {
    uint64_t x_src_0 = ((uint64_t)src->x[0]) * ((uint64_t)x);
    uint64_t x_src_1 = ((uint64_t)src->x[1]) * ((uint64_t)x);
    uint64_t x_src_2 = ((uint64_t)src->x[2]) * ((uint64_t)x);
    uint64_t x_src_3 = ((uint64_t)src->x[3]) * ((uint64_t)x);
    uint64_t x_src_4 = ((uint64_t)src->x[4]) * ((uint64_t)x);
    uint64_t x_src_5 = ((uint64_t)src->x[5]) * ((uint64_t)x);
    uint64_t x_src_6 = ((uint64_t)src->x[6]) * ((uint64_t)x);
    uint64_t x_src_7 = ((uint64_t)src->x[7]) * ((uint64_t)x);
    uint64_t x_src_8 = ((uint64_t)src->x[8]) * ((uint64_t)x);
    uint64_t x_src_9 = ((uint64_t)src->x[9]) * ((uint64_t)x);
    uint64_t x_src_10 = ((uint64_t)src->x[10]) * ((uint64_t)x);
    
    dst->x[0] = 0;
    dst->x[1] = 0;
    dst->x[2] = 0;
    dst->x[3] = 0;
    dst->x[4] = 0;
    dst->x[5] = 0;
    dst->x[6] = 0;
    dst->x[7] = 0;
    dst->x[8] = 0;
    dst->x[9] = 0;
    dst->x[10] = 0;
    
    *(uint64_t*)(&dst->x[0]) += x_src_0;
    *(uint64_t*)(&dst->x[1]) += x_src_1;
    *(uint64_t*)(&dst->x[2]) += x_src_2;
    *(uint64_t*)(&dst->x[3]) += x_src_3;
    *(uint64_t*)(&dst->x[4]) += x_src_4;
    *(uint64_t*)(&dst->x[5]) += x_src_5;
    *(uint64_t*)(&dst->x[6]) += x_src_6;
    *(uint64_t*)(&dst->x[7]) += x_src_7;
    *(uint64_t*)(&dst->x[8]) += x_src_8;
    *(uint64_t*)(&dst->x[9]) += x_src_9;
    dst->x[10] += x_src_10;
}




#endif
