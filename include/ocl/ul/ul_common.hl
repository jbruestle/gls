
void ul_gcd(ul dst, ul x, ul y);
void ul_gcd(ul dst, ul x, ul y)
{
	ul tmp, a, b;

	ul_init(tmp);
	ul_init(a);
	ul_init(b);

	if(ul_cmp(x, y) < 0)
	{
		ul_set(a, x);
		ul_set(b, y);
	}
	else
	{
		ul_set(a, y);
		ul_set(b, x);
	}

	while(ul_cmp_ui(b, 0) > 0)
	{
		ul_divrem(tmp, a, a, b);
		ul_set(tmp, a);
		ul_set(a, b);
		ul_set(b, tmp);
	}
	ul_set(dst, a);

	ul_clear(tmp);
	ul_clear(a);
	ul_clear(b);
	return;
}

/* these routines assume a modular inverse of the dividend exist */
void ul_moddiv2(ul dst, ul src, mod n);
void ul_moddiv2(ul dst, ul src, mod n)
{
	ul_set(dst, src);
	if(ul_get_ui(src) & 1)
		ul_add(dst, dst, n->n);
	ul_rshift(dst, dst, 1);
	return;
}

/* TODO: implement proper divn */
void ul_moddiv3(ul dst, ul src, mod n);
void ul_moddiv3(ul dst, ul src, mod n)
{
	ul t;

	ul_init(t);
	ul_set_ui(t, 3);
	ul_from_montgomery(t, t, n);
	ul_modinv(t, t, n->n);
	ul_modmul(dst, src, t, n);
	ul_clear(t);
	return;
}

void ul_moddiv5(ul dst, ul src, mod n);
void ul_moddiv5(ul dst, ul src, mod n)
{
	ul t;

	ul_init(t);
	ul_set_ui(t, 5);
	ul_from_montgomery(t, t, n);
	ul_modinv(t, t, n->n);
	ul_modmul(dst, src, t, n);
	ul_clear(t);
	return;
}

void ul_moddiv7(ul dst, ul src, mod n);
void ul_moddiv7(ul dst, ul src, mod n)
{
	ul t;

	ul_init(t);
	ul_set_ui(t, 7);
	ul_from_montgomery(t, t, n);
	ul_modinv(t, t, n->n);
	ul_modmul(dst, src, t, n);
	ul_clear(t);
	return;
}

void ul_moddiv11(ul dst, ul src, mod n);
void ul_moddiv11(ul dst, ul src, mod n)
{
	ul t;

	ul_init(t);
	ul_set_ui(t, 11);
	ul_from_montgomery(t, t, n);
	ul_modinv(t, t, n->n);
	ul_modmul(dst, src, t, n);
	ul_clear(t);
	return;
}

void ul_moddiv13(ul dst, ul src, mod n);
void ul_moddiv13(ul dst, ul src, mod n)
{
	ul t;

	ul_init(t);
	ul_set_ui(t, 13);
	ul_from_montgomery(t, t, n);
	ul_modinv(t, t, n->n);
	ul_modmul(dst, src, t, n);
	ul_clear(t);
	return;
}

int ul_modinv(ul dst, ul src, ul n);
int ul_modinv(ul dst, ul src, ul n)
{
	int ret, parity;
	ul u1, u2, v1, v2, t1, t2, q;

	ul_init(u1);
	ul_init(u2);
	ul_init(v1);
	ul_init(v2);
	ul_init(t1);
	ul_init(t2);
	ul_init(q);

	ret = 0;
	parity = 0;

	ul_set_ui(u1, 1);
	ul_set(u2, src);
	ul_set_ui(v1, 0);
	ul_set(v2, n);

	while(ul_cmp_ui(v2, 0) != 0)
	{
		ul_divrem(q, t2, u2, v2); /* q = u3 / v3; t3 = u3 % v3; */
		ul_mul(t1, q, v1);
		ul_add(t1, t1, u1); /* t1 = u1 + q * v1; */
		ul_set(u1, v1);
		ul_set(v1, t1);
		ul_set(u2, v2);
		ul_set(v2, t2);
		parity ^= 1;
	}

	if(ul_cmp_ui(u2, 1) != 0)
	{
		ul_set_ui(dst, 0);
		goto cleanup;
	}

	/* Ensure a positive result */
	if(parity)
		ul_sub(dst, n, u1);
	else
		ul_set(dst, u1);
	ret = 1;
cleanup:
	ul_clear(u1);
	ul_clear(u2);
	ul_clear(v1);
	ul_clear(v2);
	ul_clear(t1);
	ul_clear(t2);
	ul_clear(q);
	return ret;
}
